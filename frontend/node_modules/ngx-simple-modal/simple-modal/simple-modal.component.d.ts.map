{"version":3,"file":"simple-modal.component.d.ts","sources":["simple-modal.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { SimpleModalOptions } from './simple-modal-options';\nexport interface OnDestroyLike {\n    ngOnDestroy(): void;\n    [key: string]: any;\n}\n/**\n * Abstract modal\n * @template T - modal data;\n * @template T1 - modal result\n */\nexport declare abstract class SimpleModalComponent<T, T1> {\n    /**\n     * Observer to return result from modal\n     */\n    private observer;\n    /**\n     * Drag handle\n     */\n    handle: ElementRef | undefined;\n    /**\n     * Dialog result\n     * @type {T1}\n     */\n    result: T1;\n    /**\n     * Dialog wrapper (modal placeholder)\n     */\n    wrapper: ElementRef;\n    /**\n     * ref of options for this component\n     */\n    options: SimpleModalOptions;\n    /**\n     * ready$ is when all animations and focusing have comleted\n     */\n    _ready$: BehaviorSubject<boolean>;\n    /**\n     * Callback to the holders close function\n     */\n    private closerCallback;\n    /**\n     * Constructor\n     */\n    constructor();\n    /**\n     * Maps your object passed in the creation to fields in your own Dialog classes\n     * @param {T} data\n     */\n    mapDataObject(data: T): void;\n    /**\n     * Setup observer\n     * @return {Observable<T1>}\n     */\n    setupObserver(): Observable<T1>;\n    /**\n     * Defines what happens when close is called - default this\n     * will just call the default remove modal process. If overridden\n     * must include\n     * @param callback\n     */\n    onClosing(callback: (component: SimpleModalComponent<any, any>) => Promise<any>): void;\n    /**\n     * Closes modal\n     */\n    close(): Promise<any>;\n    /**\n     * keypress binding ngx way\n     * @param evt\n     */\n    onKeydownHandler(evt: KeyboardEvent): void;\n    readonly ready$: Observable<boolean>;\n    markAsReady(): void;\n}\n"]}