{"version":3,"file":"simple-modal.service.d.ts","sources":["simple-modal.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ApplicationRef, ComponentFactoryResolver, Injector, Type } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SimpleModalComponent } from './simple-modal.component';\nimport { SimpleModalOptionsOverrides } from './simple-modal-options';\nexport declare class SimpleModalServiceConfig {\n    container: HTMLElement | string;\n}\nexport declare class SimpleModalService {\n    private resolver;\n    private applicationRef;\n    private injector;\n    /**\n     * Placeholder of modals\n     * @type {SimpleModalHolderComponent}\n     */\n    private modalHolderComponent;\n    /**\n     * HTML container for modals\n     * type {HTMLElement | string}\n     */\n    private _container;\n    /**\n     * @param {ComponentFactoryResolver} resolver\n     * @param {ApplicationRef} applicationRef\n     * @param {Injector} injector\n     * @param {SimpleModalServiceConfig} config\n     */\n    constructor(resolver: ComponentFactoryResolver, applicationRef: ApplicationRef, injector: Injector, config: SimpleModalServiceConfig);\n    /**\n     * Adds modal\n     * @param {Type<SimpleModalComponent<T, T1>>} component\n     * @param {T?} data\n     * @param {SimpleModalOptionsOverrides?} options\n     * @return {Observable<T1>}\n     */\n    addModal<T, T1>(component: Type<SimpleModalComponent<T, T1>>, data?: T, options?: SimpleModalOptionsOverrides): Observable<T1>;\n    /**\n     * Hides and removes modal from DOM, resolves promise when fully removed\n     * @param {SimpleModalComponent} component\n     * @return {Promise<{}>}\n  \n     */\n    removeModal(component: SimpleModalComponent<any, any>): Promise<{}>;\n    /**\n     * Closes all modals, resolves promise when they're fully removed\n     * @return {Promise<{}>}\n     */\n    removeAll(): Promise<{}>;\n    /**\n     * Accessor for contain - will auto generate from string\n     * if needed or default to the root element if nothing was set\n     */\n    private container;\n    /**\n     * Creates and add to DOM modal holder component\n     * @return {SimpleModalHolderComponent}\n     */\n    private createSimpleModalHolder;\n}\n"]}