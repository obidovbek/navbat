{"version":3,"file":"simple-modal-holder.component.d.ts","sources":["simple-modal-holder.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentFactoryResolver, Type, Renderer2, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SimpleModalOptions, SimpleModalOptionsOverrides } from './simple-modal-options';\nimport { SimpleModalComponent } from './simple-modal.component';\n/**\n * View container manager which manages a list of modals currently active\n * inside the viewvontainer\n */\nexport declare class SimpleModalHolderComponent {\n    private resolver;\n    private renderer;\n    private ngZone;\n    private defaultSimpleModalOptions;\n    /**\n     * Target viewContainer to insert modals\n     */\n    viewContainer: any;\n    /**\n     * modal collection, maintained by addModal and removeModal\n     * @type {Array<SimpleModalComponent> }\n     */\n    modals: Array<SimpleModalComponent<any, any>>;\n    /**\n     * if auto focus is on and no element focused, store it here to be restored back after close\n     */\n    previousActiveElement: any;\n    /**\n     * Constructor\n     * @param {ComponentFactoryResolver} resolver\n     * @param renderer\n     * @param ngZone\n     * @param defaultSimpleModalOptions\n     */\n    constructor(resolver: ComponentFactoryResolver, renderer: Renderer2, ngZone: NgZone, defaultSimpleModalOptions: SimpleModalOptions);\n    /**\n     * Configures then adds modal to the modals array, and populates with data passed in\n     * @param {Type<SimpleModalComponent>} component\n     * @param {object?} data\n     * @param {SimpleModalOptionsOverrides?} options\n     * @return {Observable<*>}\n     */\n    addModal<T, T1>(component: Type<SimpleModalComponent<T, T1>>, data?: T, options?: SimpleModalOptionsOverrides): Observable<T1>;\n    /**\n     * triggers components close function\n     * to take effect\n     * @returns {Promise<void>}\n     * @param closingModal\n     */\n    removeModal(closingModal: SimpleModalComponent<any, any>): Promise<any>;\n    /**\n     * Instructs all open modals to\n     */\n    removeAllModals(): Promise<any>;\n    /**\n     * Bind a body class 'modal-open' to a condition of modals in pool > 0\n     * @param bodyClass - string to add and remove from body in document\n     */\n    private toggleBodyClass;\n    /**\n     * if the option to close on background click is set, then hook up a callback\n     * @param modalWrapper\n     */\n    private configureCloseOnClickOutside;\n    /**\n     * Auto focus o the first element if autofocus is on\n     * @param componentWrapper\n     * @param autoFocus\n     */\n    private autoFocusFirstElement;\n    /**\n     * Restores the last focus is there was one\n     */\n    private restorePreviousFocus;\n    /**\n     * Configure the adding and removal of a wrapper class - predominantly animation focused\n     * @param modalWrapperEl\n     * @param wrapperClass\n     */\n    private toggleWrapperClass;\n    /**\n     * Enables the drag option on the modal if the options have it enabled\n     * @param component\n     * @param options\n     * @private\n     */\n    private setDraggable;\n    /**\n     * Helper function for a more readable timeout\n     * @param ms\n     */\n    private wait;\n    /**\n     * Instructs the holder to remove the modal and\n     * removes this component from the collection\n     * @param {SimpleModalComponent} component\n     */\n    private removeModalFromArray;\n}\n"]}