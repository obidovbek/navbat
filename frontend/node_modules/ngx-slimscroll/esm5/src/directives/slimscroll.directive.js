"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/**
 * @fileoverview added by tsickle
 * Generated from: src/directives/slimscroll.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@angular/common");
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var slimscroll_options_class_1 = require("../classes/slimscroll-options.class");
var slimscroll_state_class_1 = require("../classes/slimscroll-state.class");
var ɵ0 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t; }, ɵ1 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * t; }, ɵ2 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * (2 - t); }, ɵ3 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; }, ɵ4 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * t * t; }, ɵ5 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return (--t) * t * t + 1; }, ɵ6 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; }, ɵ7 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * t * t * t; }, ɵ8 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return 1 - (--t) * t * t * t; }, ɵ9 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; }, ɵ10 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * t * t * t * t; }, ɵ11 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return 1 + (--t) * t * t * t * t; }, ɵ12 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; };
exports.ɵ0 = ɵ0;
exports.ɵ1 = ɵ1;
exports.ɵ2 = ɵ2;
exports.ɵ3 = ɵ3;
exports.ɵ4 = ɵ4;
exports.ɵ5 = ɵ5;
exports.ɵ6 = ɵ6;
exports.ɵ7 = ɵ7;
exports.ɵ8 = ɵ8;
exports.ɵ9 = ɵ9;
exports.ɵ10 = ɵ10;
exports.ɵ11 = ɵ11;
exports.ɵ12 = ɵ12;
/** @type {?} */
exports.easing = {
    linear: (ɵ0),
    inQuad: (ɵ1),
    outQuad: (ɵ2),
    inOutQuad: (ɵ3),
    inCubic: (ɵ4),
    outCubic: (ɵ5),
    inOutCubic: (ɵ6),
    inQuart: (ɵ7),
    outQuart: (ɵ8),
    inOutQuart: (ɵ9),
    inQuint: (ɵ10),
    outQuint: (ɵ11),
    inOutQuint: (ɵ12)
};
var SlimScrollDirective = /** @class */ (function () {
    function SlimScrollDirective(viewContainer, renderer, document, optionsDefaults) {
        var _this = this;
        this.viewContainer = viewContainer;
        this.renderer = renderer;
        this.document = document;
        this.optionsDefaults = optionsDefaults;
        this.enabled = true;
        this.scrollChanged = new core_1.EventEmitter();
        this.barVisibilityChange = new core_1.EventEmitter();
        this.initWheel = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var dommousescroll = rxjs_1.fromEvent(_this.el, 'DOMMouseScroll');
            /** @type {?} */
            var mousewheel = rxjs_1.fromEvent(_this.el, 'mousewheel');
            /** @type {?} */
            var wheelSubscription = rxjs_1.merge.apply(void 0, __spread([dommousescroll, mousewheel])).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var delta = 0;
                if (((/** @type {?} */ (e))).wheelDelta) {
                    delta = -((/** @type {?} */ (e))).wheelDelta / 120;
                }
                if (e.detail) {
                    delta = e.detail / 3;
                }
                _this.scrollContent(delta, true, false);
                if (e.preventDefault) {
                    e.preventDefault();
                }
            }));
            _this.interactionSubscriptions.add(wheelSubscription);
        });
        this.initDrag = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var bar = _this.bar;
            /** @type {?} */
            var mousemove = rxjs_1.fromEvent(_this.document.documentElement, 'mousemove');
            /** @type {?} */
            var touchmove = rxjs_1.fromEvent(_this.document.documentElement, 'touchmove');
            /** @type {?} */
            var mousedown = rxjs_1.fromEvent(bar, 'mousedown');
            /** @type {?} */
            var touchstart = rxjs_1.fromEvent(_this.el, 'touchstart');
            /** @type {?} */
            var mouseup = rxjs_1.fromEvent(_this.document.documentElement, 'mouseup');
            /** @type {?} */
            var touchend = rxjs_1.fromEvent(_this.document.documentElement, 'touchend');
            /** @type {?} */
            var mousedrag = mousedown
                .pipe(operators_1.mergeMap((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.pageY = e.pageY;
                _this.top = parseFloat(getComputedStyle(bar).top);
                return mousemove
                    .pipe(operators_1.map((/**
                 * @param {?} emove
                 * @return {?}
                 */
                function (emove) {
                    emove.preventDefault();
                    return _this.top + emove.pageY - _this.pageY;
                })), operators_1.takeUntil(mouseup));
            })));
            /** @type {?} */
            var touchdrag = touchstart
                .pipe(operators_1.mergeMap((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.pageY = e.targetTouches[0].pageY;
                _this.top = -parseFloat(getComputedStyle(bar).top);
                return touchmove
                    .pipe(operators_1.map((/**
                 * @param {?} tmove
                 * @return {?}
                 */
                function (tmove) {
                    return -(_this.top + tmove.targetTouches[0].pageY - _this.pageY);
                })), operators_1.takeUntil(touchend));
            })));
            /** @type {?} */
            var dragSubscription = rxjs_1.merge.apply(void 0, __spread([mousedrag, touchdrag])).subscribe((/**
             * @param {?} top
             * @return {?}
             */
            function (top) {
                _this.body.addEventListener('selectstart', _this.preventDefaultEvent, false);
                _this.renderer.setStyle(_this.body, 'touch-action', 'pan-y');
                _this.renderer.setStyle(_this.body, 'user-select', 'none');
                _this.renderer.setStyle(_this.bar, 'top', top + "px");
                /** @type {?} */
                var over = _this.scrollContent(0, true, false);
                /** @type {?} */
                var maxTop = _this.el.offsetHeight - _this.bar.offsetHeight;
                if (over && over < 0 && -over <= maxTop) {
                    _this.renderer.setStyle(_this.el, 'paddingTop', -over + 'px');
                }
                else if (over && over > 0 && over <= maxTop) {
                    _this.renderer.setStyle(_this.el, 'paddingBottom', over + 'px');
                }
            }));
            /** @type {?} */
            var dragEndSubscription = rxjs_1.merge.apply(void 0, __spread([mouseup, touchend])).subscribe((/**
             * @return {?}
             */
            function () {
                _this.body.removeEventListener('selectstart', _this.preventDefaultEvent, false);
                /** @type {?} */
                var paddingTop = parseInt(_this.el.style.paddingTop, 10);
                /** @type {?} */
                var paddingBottom = parseInt(_this.el.style.paddingBottom, 10);
                _this.renderer.setStyle(_this.body, 'touch-action', 'unset');
                _this.renderer.setStyle(_this.body, 'user-select', 'default');
                if (paddingTop > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
                else if (paddingBottom > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
            }));
            _this.interactionSubscriptions.add(dragSubscription);
            _this.interactionSubscriptions.add(dragEndSubscription);
        });
        this.preventDefaultEvent = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.preventDefault();
            e.stopPropagation();
        });
        this.viewContainer = viewContainer;
        this.el = viewContainer.element.nativeElement;
        this.body = this.document.querySelector('body');
        this.mutationThrottleTimeout = 50;
    }
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // setup if no changes for enabled for the first time
        if (!this.interactionSubscriptions && this.enabled) {
            this.setup();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.enabled) {
            if (this.enabled) {
                this.setup();
            }
            else {
                this.destroy();
            }
        }
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.setup = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.interactionSubscriptions = new rxjs_1.Subscription();
        if (this.optionsDefaults) {
            this.options = new slimscroll_options_class_1.SlimScrollOptions(this.optionsDefaults).merge(this.options);
        }
        else {
            this.options = new slimscroll_options_class_1.SlimScrollOptions(this.options);
        }
        this.setStyle();
        this.wrapContainer();
        this.initGrid();
        this.initBar();
        this.getBarHeight();
        this.initWheel();
        this.initDrag();
        if (!this.options.alwaysVisible) {
            this.hideBarAndGrid();
        }
        if (MutationObserver) {
            if (this.mutationObserver) {
                this.mutationObserver.disconnect();
            }
            this.mutationObserver = new MutationObserver((/**
             * @return {?}
             */
            function () {
                if (_this.mutationThrottleTimeout) {
                    clearTimeout(_this.mutationThrottleTimeout);
                    _this.mutationThrottleTimeout = setTimeout(_this.onMutation.bind(_this), 50);
                }
            }));
            this.mutationObserver.observe(this.el, { subtree: true, childList: true });
        }
        if (this.scrollEvents && this.scrollEvents instanceof core_1.EventEmitter) {
            /** @type {?} */
            var scrollSubscription = this.scrollEvents.subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.handleEvent(event); }));
            this.interactionSubscriptions.add(scrollSubscription);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SlimScrollDirective.prototype.handleEvent = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.type === 'scrollToBottom') {
            /** @type {?} */
            var y = this.el.scrollHeight - this.el.clientHeight;
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollToTop') {
            /** @type {?} */
            var y = 0;
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollToPercent' && (e.percent >= 0 && e.percent <= 100)) {
            /** @type {?} */
            var y = Math.round(((this.el.scrollHeight - this.el.clientHeight) / 100) * e.percent);
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollTo') {
            /** @type {?} */
            var y = e.y;
            if (y <= this.el.scrollHeight - this.el.clientHeight && y >= 0) {
                this.scrollTo(y, e.duration, e.easing);
            }
        }
        else if (e.type === 'recalculate') {
            this.getBarHeight();
        }
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.setStyle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.el;
        this.renderer.setStyle(el, 'overflow', 'hidden');
        this.renderer.setStyle(el, 'position', 'relative');
        this.renderer.setStyle(el, 'display', 'block');
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.onMutation = /**
     * @return {?}
     */
    function () {
        this.getBarHeight();
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.wrapContainer = /**
     * @return {?}
     */
    function () {
        this.wrapper = this.renderer.createElement('div');
        /** @type {?} */
        var wrapper = this.wrapper;
        /** @type {?} */
        var el = this.el;
        this.renderer.addClass(wrapper, 'slimscroll-wrapper');
        this.renderer.setStyle(wrapper, 'position', 'relative');
        this.renderer.setStyle(wrapper, 'overflow', 'hidden');
        this.renderer.setStyle(wrapper, 'display', 'inline-block');
        this.renderer.setStyle(wrapper, 'margin', getComputedStyle(el).margin);
        this.renderer.setStyle(wrapper, 'width', '100%');
        this.renderer.setStyle(wrapper, 'height', getComputedStyle(el).height);
        this.renderer.insertBefore(el.parentNode, wrapper, el);
        this.renderer.appendChild(wrapper, el);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.initGrid = /**
     * @return {?}
     */
    function () {
        this.grid = this.renderer.createElement('div');
        /** @type {?} */
        var grid = this.grid;
        this.renderer.addClass(grid, 'slimscroll-grid');
        this.renderer.setStyle(grid, 'position', 'absolute');
        this.renderer.setStyle(grid, 'top', '0');
        this.renderer.setStyle(grid, 'bottom', '0');
        this.renderer.setStyle(grid, this.options.position, '0');
        this.renderer.setStyle(grid, 'width', this.options.gridWidth + "px");
        this.renderer.setStyle(grid, 'background', this.options.gridBackground);
        this.renderer.setStyle(grid, 'opacity', this.options.gridOpacity);
        this.renderer.setStyle(grid, 'display', 'block');
        this.renderer.setStyle(grid, 'cursor', 'pointer');
        this.renderer.setStyle(grid, 'z-index', '99');
        this.renderer.setStyle(grid, 'border-radius', this.options.gridBorderRadius + "px");
        this.renderer.setStyle(grid, 'margin', this.options.gridMargin);
        this.renderer.appendChild(this.wrapper, grid);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.initBar = /**
     * @return {?}
     */
    function () {
        this.bar = this.renderer.createElement('div');
        /** @type {?} */
        var bar = this.bar;
        this.renderer.addClass(bar, 'slimscroll-bar');
        this.renderer.setStyle(bar, 'position', 'absolute');
        this.renderer.setStyle(bar, 'top', '0');
        this.renderer.setStyle(bar, this.options.position, '0');
        this.renderer.setStyle(bar, 'width', this.options.barWidth + "px");
        this.renderer.setStyle(bar, 'background', this.options.barBackground);
        this.renderer.setStyle(bar, 'opacity', this.options.barOpacity);
        this.renderer.setStyle(bar, 'display', 'block');
        this.renderer.setStyle(bar, 'cursor', 'pointer');
        this.renderer.setStyle(bar, 'z-index', '100');
        this.renderer.setStyle(bar, 'border-radius', this.options.barBorderRadius + "px");
        this.renderer.setStyle(bar, 'margin', this.options.barMargin);
        this.renderer.appendChild(this.wrapper, bar);
        this.barVisibilityChange.emit(true);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.getBarHeight = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elHeight = this.el.offsetHeight;
        /** @type {?} */
        var barHeight = Math.max((elHeight / this.el.scrollHeight) * elHeight, 30) + 'px';
        /** @type {?} */
        var display = parseInt(barHeight, 10) === elHeight ? 'none' : 'block';
        if (this.wrapper.offsetHeight !== elHeight) {
            this.renderer.setStyle(this.wrapper, 'height', elHeight + 'px');
        }
        this.renderer.setStyle(this.bar, 'height', barHeight);
        this.renderer.setStyle(this.bar, 'display', display);
        this.renderer.setStyle(this.grid, 'display', display);
        this.barVisibilityChange.emit(display !== 'none');
    };
    /**
     * @param {?} y
     * @param {?} duration
     * @param {?} easingFunc
     * @return {?}
     */
    SlimScrollDirective.prototype.scrollTo = /**
     * @param {?} y
     * @param {?} duration
     * @param {?} easingFunc
     * @return {?}
     */
    function (y, duration, easingFunc) {
        var _this = this;
        /** @type {?} */
        var start = Date.now();
        /** @type {?} */
        var from = this.el.scrollTop;
        /** @type {?} */
        var maxTop = this.el.offsetHeight - this.bar.offsetHeight;
        /** @type {?} */
        var maxElScrollTop = this.el.scrollHeight - this.el.clientHeight;
        /** @type {?} */
        var barHeight = Math.max((this.el.offsetHeight / this.el.scrollHeight) * this.el.offsetHeight, 30);
        /** @type {?} */
        var paddingTop = parseInt(this.el.style.paddingTop, 10) || 0;
        /** @type {?} */
        var paddingBottom = parseInt(this.el.style.paddingBottom, 10) || 0;
        /** @type {?} */
        var scroll = (/**
         * @param {?} timestamp
         * @return {?}
         */
        function (timestamp) {
            /** @type {?} */
            var currentTime = Date.now();
            /** @type {?} */
            var time = Math.min(1, ((currentTime - start) / duration));
            /** @type {?} */
            var easedTime = exports.easing[easingFunc](time);
            if (paddingTop > 0 || paddingBottom > 0) {
                /** @type {?} */
                var fromY = null;
                if (paddingTop > 0) {
                    fromY = -paddingTop;
                    fromY = -((easedTime * (y - fromY)) + fromY);
                    _this.renderer.setStyle(_this.el, 'paddingTop', fromY + "px");
                }
                if (paddingBottom > 0) {
                    fromY = paddingBottom;
                    fromY = ((easedTime * (y - fromY)) + fromY);
                    _this.renderer.setStyle(_this.el, 'paddingBottom', fromY + "px");
                }
            }
            else {
                _this.el.scrollTop = (easedTime * (y - from)) + from;
            }
            /** @type {?} */
            var percentScroll = _this.el.scrollTop / maxElScrollTop;
            if (paddingBottom === 0) {
                /** @type {?} */
                var delta = Math.round(Math.round(_this.el.clientHeight * percentScroll) - barHeight);
                if (delta > 0) {
                    _this.renderer.setStyle(_this.bar, 'top', delta + "px");
                }
            }
            if (time < 1) {
                requestAnimationFrame(scroll);
            }
        });
        requestAnimationFrame(scroll);
    };
    /**
     * @param {?} y
     * @param {?} isWheel
     * @param {?} isJump
     * @return {?}
     */
    SlimScrollDirective.prototype.scrollContent = /**
     * @param {?} y
     * @param {?} isWheel
     * @param {?} isJump
     * @return {?}
     */
    function (y, isWheel, isJump) {
        var _this = this;
        /** @type {?} */
        var delta = y;
        /** @type {?} */
        var maxTop = this.el.offsetHeight - this.bar.offsetHeight;
        /** @type {?} */
        var hiddenContent = this.el.scrollHeight - this.el.offsetHeight;
        /** @type {?} */
        var percentScroll;
        /** @type {?} */
        var over = null;
        if (isWheel) {
            delta = parseInt(getComputedStyle(this.bar).top, 10) + y * 20 / 100 * this.bar.offsetHeight;
            if (delta < 0 || delta > maxTop) {
                over = delta > maxTop ? delta - maxTop : delta;
            }
            delta = Math.min(Math.max(delta, 0), maxTop);
            delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);
            this.renderer.setStyle(this.bar, 'top', delta + 'px');
        }
        percentScroll = parseInt(getComputedStyle(this.bar).top, 10) / (this.el.offsetHeight - this.bar.offsetHeight);
        delta = percentScroll * hiddenContent;
        this.el.scrollTop = delta;
        this.showBarAndGrid();
        if (!this.options.alwaysVisible) {
            if (this.visibleTimeout) {
                clearTimeout(this.visibleTimeout);
            }
            this.visibleTimeout = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.hideBarAndGrid();
            }), this.options.visibleTimeout);
        }
        /** @type {?} */
        var isScrollAtStart = delta === 0;
        /** @type {?} */
        var isScrollAtEnd = delta === hiddenContent;
        /** @type {?} */
        var scrollPosition = Math.ceil(delta);
        /** @type {?} */
        var scrollState = new slimscroll_state_class_1.SlimScrollState({ scrollPosition: scrollPosition, isScrollAtStart: isScrollAtStart, isScrollAtEnd: isScrollAtEnd });
        this.scrollChanged.emit(scrollState);
        return over;
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.showBarAndGrid = /**
     * @return {?}
     */
    function () {
        this.renderer.setStyle(this.grid, 'background', this.options.gridBackground);
        this.renderer.setStyle(this.bar, 'background', this.options.barBackground);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.hideBarAndGrid = /**
     * @return {?}
     */
    function () {
        this.renderer.setStyle(this.grid, 'background', 'transparent');
        this.renderer.setStyle(this.bar, 'background', 'transparent');
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
        if (this.el.parentElement.classList.contains('slimscroll-wrapper')) {
            /** @type {?} */
            var wrapper = this.el.parentElement;
            /** @type {?} */
            var bar = wrapper.querySelector('.slimscroll-bar');
            wrapper.removeChild(bar);
            /** @type {?} */
            var grid = wrapper.querySelector('.slimscroll-grid');
            wrapper.removeChild(grid);
            this.unwrap(wrapper);
        }
        if (this.interactionSubscriptions) {
            this.interactionSubscriptions.unsubscribe();
        }
    };
    /**
     * @param {?} wrapper
     * @return {?}
     */
    SlimScrollDirective.prototype.unwrap = /**
     * @param {?} wrapper
     * @return {?}
     */
    function (wrapper) {
        /** @type {?} */
        var docFrag = document.createDocumentFragment();
        while (wrapper.firstChild) {
            /** @type {?} */
            var child = wrapper.removeChild(wrapper.firstChild);
            docFrag.appendChild(child);
        }
        wrapper.parentNode.replaceChild(docFrag, wrapper);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SlimScrollDirective.prototype.onResize = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.getBarHeight();
    };
    SlimScrollDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[slimScroll]',
                    // tslint:disable-line
                    exportAs: 'slimScroll'
                },] }
    ];
    /** @nocollapse */
    SlimScrollDirective.ctorParameters = function () { return [
        { type: core_1.ViewContainerRef, decorators: [{ type: core_1.Inject, args: [core_1.ViewContainerRef,] }] },
        { type: core_1.Renderer2, decorators: [{ type: core_1.Inject, args: [core_1.Renderer2,] }] },
        { type: undefined, decorators: [{ type: core_1.Inject, args: [common_1.DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: core_1.Inject, args: [slimscroll_options_class_1.SLIMSCROLL_DEFAULTS,] }, { type: core_1.Optional }] }
    ]; };
    SlimScrollDirective.propDecorators = {
        enabled: [{ type: core_1.Input }],
        options: [{ type: core_1.Input }],
        scrollEvents: [{ type: core_1.Input }],
        scrollChanged: [{ type: core_1.Output }],
        barVisibilityChange: [{ type: core_1.Output }],
        onResize: [{ type: core_1.HostListener, args: ['window:resize', ['$event'],] }]
    };
    return SlimScrollDirective;
}());
exports.SlimScrollDirective = SlimScrollDirective;
if (false) {
    /** @type {?} */
    SlimScrollDirective.prototype.enabled;
    /** @type {?} */
    SlimScrollDirective.prototype.options;
    /** @type {?} */
    SlimScrollDirective.prototype.scrollEvents;
    /** @type {?} */
    SlimScrollDirective.prototype.scrollChanged;
    /** @type {?} */
    SlimScrollDirective.prototype.barVisibilityChange;
    /** @type {?} */
    SlimScrollDirective.prototype.el;
    /** @type {?} */
    SlimScrollDirective.prototype.wrapper;
    /** @type {?} */
    SlimScrollDirective.prototype.grid;
    /** @type {?} */
    SlimScrollDirective.prototype.bar;
    /** @type {?} */
    SlimScrollDirective.prototype.body;
    /** @type {?} */
    SlimScrollDirective.prototype.pageY;
    /** @type {?} */
    SlimScrollDirective.prototype.top;
    /** @type {?} */
    SlimScrollDirective.prototype.dragging;
    /** @type {?} */
    SlimScrollDirective.prototype.mutationThrottleTimeout;
    /** @type {?} */
    SlimScrollDirective.prototype.mutationObserver;
    /** @type {?} */
    SlimScrollDirective.prototype.lastTouchPositionY;
    /** @type {?} */
    SlimScrollDirective.prototype.visibleTimeout;
    /** @type {?} */
    SlimScrollDirective.prototype.interactionSubscriptions;
    /** @type {?} */
    SlimScrollDirective.prototype.initWheel;
    /** @type {?} */
    SlimScrollDirective.prototype.initDrag;
    /** @type {?} */
    SlimScrollDirective.prototype.preventDefaultEvent;
    /**
     * @type {?}
     * @private
     */
    SlimScrollDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    SlimScrollDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SlimScrollDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    SlimScrollDirective.prototype.optionsDefaults;
}
//# sourceMappingURL=data:application/json;base64,