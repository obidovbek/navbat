import core from '@angular/core';
import common from '@angular/common';
import rxjs from 'rxjs';
import operators from 'rxjs/operators';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var slimscrollEvent_class = createCommonjsModule(function (module, exports) {
"use strict";
/**
 * @fileoverview added by tsickle
 * Generated from: src/classes/slimscroll-event.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @record
 */
function ISlimScrollEvent() { }
exports.ISlimScrollEvent = ISlimScrollEvent;
if (false) {
    /** @type {?} */
    ISlimScrollEvent.prototype.type;
    /** @type {?|undefined} */
    ISlimScrollEvent.prototype.y;
    /** @type {?|undefined} */
    ISlimScrollEvent.prototype.percent;
    /** @type {?|undefined} */
    ISlimScrollEvent.prototype.duration;
    /** @type {?|undefined} */
    ISlimScrollEvent.prototype.easing;
}
var SlimScrollEvent = /** @class */ (function () {
    function SlimScrollEvent(obj) {
        this.type = obj.type;
        this.y = obj && obj.y ? obj.y : 0;
        this.percent = obj && obj.percent ? obj.percent : 0;
        this.duration = obj && obj.duration ? obj.duration : 0;
        this.easing = obj && obj.easing ? obj.easing : 'linear';
    }
    return SlimScrollEvent;
}());
exports.SlimScrollEvent = SlimScrollEvent;
if (false) {
    /** @type {?} */
    SlimScrollEvent.prototype.type;
    /** @type {?} */
    SlimScrollEvent.prototype.y;
    /** @type {?} */
    SlimScrollEvent.prototype.percent;
    /** @type {?} */
    SlimScrollEvent.prototype.duration;
    /** @type {?} */
    SlimScrollEvent.prototype.easing;
}

});

var slimscrollEvent_class$1 = unwrapExports(slimscrollEvent_class);
var slimscrollEvent_class_1 = slimscrollEvent_class.ISlimScrollEvent;
var slimscrollEvent_class_2 = slimscrollEvent_class.SlimScrollEvent;

var slimscrollOptions_class = createCommonjsModule(function (module, exports) {
"use strict";
/**
 * @fileoverview added by tsickle
 * Generated from: src/classes/slimscroll-options.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });

/**
 * @record
 */
function ISlimScrollOptions() { }
exports.ISlimScrollOptions = ISlimScrollOptions;
if (false) {
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.position;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.barBackground;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.barOpacity;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.barWidth;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.barBorderRadius;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.barMargin;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.gridBackground;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.gridOpacity;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.gridWidth;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.gridBorderRadius;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.gridMargin;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.alwaysVisible;
    /** @type {?|undefined} */
    ISlimScrollOptions.prototype.visibleTimeout;
}
/** @type {?} */
exports.SLIMSCROLL_DEFAULTS = new core.InjectionToken('NGX_SLIMSCROLL_DEFAULTS');
var SlimScrollOptions = /** @class */ (function () {
    function SlimScrollOptions(obj) {
        this.position = obj && obj.position ? obj.position : 'right';
        this.barBackground = obj && obj.barBackground ? obj.barBackground : '#343a40';
        this.barOpacity = obj && obj.barOpacity ? obj.barOpacity : '1';
        this.barWidth = obj && obj.barWidth ? obj.barWidth : '12';
        this.barBorderRadius = obj && obj.barBorderRadius ? obj.barBorderRadius : '5';
        this.barMargin = obj && obj.barMargin ? obj.barMargin : '1px 0';
        this.gridBackground = obj && obj.gridBackground ? obj.gridBackground : '#adb5bd';
        this.gridOpacity = obj && obj.gridOpacity ? obj.gridOpacity : '1';
        this.gridWidth = obj && obj.gridWidth ? obj.gridWidth : '8';
        this.gridBorderRadius = obj && obj.gridBorderRadius ? obj.gridBorderRadius : '10';
        this.gridMargin = obj && obj.gridMargin ? obj.gridMargin : '1px 2px';
        this.alwaysVisible = obj && typeof obj.alwaysVisible !== 'undefined' ? obj.alwaysVisible : true;
        this.visibleTimeout = obj && obj.visibleTimeout ? obj.visibleTimeout : 1000;
    }
    /**
     * @param {?=} obj
     * @return {?}
     */
    SlimScrollOptions.prototype.merge = /**
     * @param {?=} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var result = new SlimScrollOptions();
        result.position = obj && obj.position ? obj.position : this.position;
        result.barBackground = obj && obj.barBackground ? obj.barBackground : this.barBackground;
        result.barOpacity = obj && obj.barOpacity ? obj.barOpacity : this.barOpacity;
        result.barWidth = obj && obj.barWidth ? obj.barWidth : this.barWidth;
        result.barBorderRadius = obj && obj.barBorderRadius ? obj.barBorderRadius : this.barBorderRadius;
        result.barMargin = obj && obj.barMargin ? obj.barMargin : this.barMargin;
        result.gridBackground = obj && obj.gridBackground ? obj.gridBackground : this.gridBackground;
        result.gridOpacity = obj && obj.gridOpacity ? obj.gridOpacity : this.gridOpacity;
        result.gridWidth = obj && obj.gridWidth ? obj.gridWidth : this.gridWidth;
        result.gridBorderRadius = obj && obj.gridBorderRadius ? obj.gridBorderRadius : this.gridBorderRadius;
        result.gridMargin = obj && obj.gridMargin ? obj.gridMargin : this.gridMargin;
        result.alwaysVisible = obj && typeof obj.alwaysVisible !== 'undefined' ? obj.alwaysVisible : this.alwaysVisible;
        result.visibleTimeout = obj && obj.visibleTimeout ? obj.visibleTimeout : this.visibleTimeout;
        return result;
    };
    return SlimScrollOptions;
}());
exports.SlimScrollOptions = SlimScrollOptions;
if (false) {
    /** @type {?} */
    SlimScrollOptions.prototype.position;
    /** @type {?} */
    SlimScrollOptions.prototype.barBackground;
    /** @type {?} */
    SlimScrollOptions.prototype.barOpacity;
    /** @type {?} */
    SlimScrollOptions.prototype.barWidth;
    /** @type {?} */
    SlimScrollOptions.prototype.barBorderRadius;
    /** @type {?} */
    SlimScrollOptions.prototype.barMargin;
    /** @type {?} */
    SlimScrollOptions.prototype.gridBackground;
    /** @type {?} */
    SlimScrollOptions.prototype.gridOpacity;
    /** @type {?} */
    SlimScrollOptions.prototype.gridWidth;
    /** @type {?} */
    SlimScrollOptions.prototype.gridBorderRadius;
    /** @type {?} */
    SlimScrollOptions.prototype.gridMargin;
    /** @type {?} */
    SlimScrollOptions.prototype.alwaysVisible;
    /** @type {?} */
    SlimScrollOptions.prototype.visibleTimeout;
}

});

var slimscrollOptions_class$1 = unwrapExports(slimscrollOptions_class);
var slimscrollOptions_class_1 = slimscrollOptions_class.ISlimScrollOptions;
var slimscrollOptions_class_2 = slimscrollOptions_class.SLIMSCROLL_DEFAULTS;
var slimscrollOptions_class_3 = slimscrollOptions_class.SlimScrollOptions;

var slimscrollState_class = createCommonjsModule(function (module, exports) {
"use strict";
/**
 * @fileoverview added by tsickle
 * Generated from: src/classes/slimscroll-state.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @record
 */
function ISlimScrollState() { }
exports.ISlimScrollState = ISlimScrollState;
if (false) {
    /** @type {?} */
    ISlimScrollState.prototype.scrollPosition;
    /** @type {?} */
    ISlimScrollState.prototype.isScrollAtStart;
    /** @type {?} */
    ISlimScrollState.prototype.isScrollAtEnd;
}
var SlimScrollState = /** @class */ (function () {
    function SlimScrollState(obj) {
        this.scrollPosition = obj && obj.scrollPosition ? obj.scrollPosition : 0;
        this.isScrollAtStart = obj && typeof obj.isScrollAtStart !== 'undefined' ? obj.isScrollAtStart : true;
        this.isScrollAtEnd = obj && typeof obj.isScrollAtEnd !== 'undefined' ? obj.isScrollAtEnd : false;
    }
    return SlimScrollState;
}());
exports.SlimScrollState = SlimScrollState;
if (false) {
    /** @type {?} */
    SlimScrollState.prototype.scrollPosition;
    /** @type {?} */
    SlimScrollState.prototype.isScrollAtStart;
    /** @type {?} */
    SlimScrollState.prototype.isScrollAtEnd;
}

});

var slimscrollState_class$1 = unwrapExports(slimscrollState_class);
var slimscrollState_class_1 = slimscrollState_class.ISlimScrollState;
var slimscrollState_class_2 = slimscrollState_class.SlimScrollState;

var slimscroll_directive = createCommonjsModule(function (module, exports) {
"use strict";
var __read = (commonjsGlobal && commonjsGlobal.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (commonjsGlobal && commonjsGlobal.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/**
 * @fileoverview added by tsickle
 * Generated from: src/directives/slimscroll.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });






var ɵ0 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t; }, ɵ1 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * t; }, ɵ2 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * (2 - t); }, ɵ3 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t; }, ɵ4 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * t * t; }, ɵ5 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return (--t) * t * t + 1; }, ɵ6 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; }, ɵ7 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * t * t * t; }, ɵ8 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return 1 - (--t) * t * t * t; }, ɵ9 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t; }, ɵ10 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t * t * t * t * t; }, ɵ11 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return 1 + (--t) * t * t * t * t; }, ɵ12 = /**
 * @param {?} t
 * @return {?}
 */
function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; };
exports.ɵ0 = ɵ0;
exports.ɵ1 = ɵ1;
exports.ɵ2 = ɵ2;
exports.ɵ3 = ɵ3;
exports.ɵ4 = ɵ4;
exports.ɵ5 = ɵ5;
exports.ɵ6 = ɵ6;
exports.ɵ7 = ɵ7;
exports.ɵ8 = ɵ8;
exports.ɵ9 = ɵ9;
exports.ɵ10 = ɵ10;
exports.ɵ11 = ɵ11;
exports.ɵ12 = ɵ12;
/** @type {?} */
exports.easing = {
    linear: (ɵ0),
    inQuad: (ɵ1),
    outQuad: (ɵ2),
    inOutQuad: (ɵ3),
    inCubic: (ɵ4),
    outCubic: (ɵ5),
    inOutCubic: (ɵ6),
    inQuart: (ɵ7),
    outQuart: (ɵ8),
    inOutQuart: (ɵ9),
    inQuint: (ɵ10),
    outQuint: (ɵ11),
    inOutQuint: (ɵ12)
};
var SlimScrollDirective = /** @class */ (function () {
    function SlimScrollDirective(viewContainer, renderer, document, optionsDefaults) {
        var _this = this;
        this.viewContainer = viewContainer;
        this.renderer = renderer;
        this.document = document;
        this.optionsDefaults = optionsDefaults;
        this.enabled = true;
        this.scrollChanged = new core.EventEmitter();
        this.barVisibilityChange = new core.EventEmitter();
        this.initWheel = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var dommousescroll = rxjs.fromEvent(_this.el, 'DOMMouseScroll');
            /** @type {?} */
            var mousewheel = rxjs.fromEvent(_this.el, 'mousewheel');
            /** @type {?} */
            var wheelSubscription = rxjs.merge.apply(void 0, __spread([dommousescroll, mousewheel])).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var delta = 0;
                if (((/** @type {?} */ (e))).wheelDelta) {
                    delta = -((/** @type {?} */ (e))).wheelDelta / 120;
                }
                if (e.detail) {
                    delta = e.detail / 3;
                }
                _this.scrollContent(delta, true, false);
                if (e.preventDefault) {
                    e.preventDefault();
                }
            }));
            _this.interactionSubscriptions.add(wheelSubscription);
        });
        this.initDrag = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var bar = _this.bar;
            /** @type {?} */
            var mousemove = rxjs.fromEvent(_this.document.documentElement, 'mousemove');
            /** @type {?} */
            var touchmove = rxjs.fromEvent(_this.document.documentElement, 'touchmove');
            /** @type {?} */
            var mousedown = rxjs.fromEvent(bar, 'mousedown');
            /** @type {?} */
            var touchstart = rxjs.fromEvent(_this.el, 'touchstart');
            /** @type {?} */
            var mouseup = rxjs.fromEvent(_this.document.documentElement, 'mouseup');
            /** @type {?} */
            var touchend = rxjs.fromEvent(_this.document.documentElement, 'touchend');
            /** @type {?} */
            var mousedrag = mousedown
                .pipe(operators.mergeMap((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.pageY = e.pageY;
                _this.top = parseFloat(getComputedStyle(bar).top);
                return mousemove
                    .pipe(operators.map((/**
                 * @param {?} emove
                 * @return {?}
                 */
                function (emove) {
                    emove.preventDefault();
                    return _this.top + emove.pageY - _this.pageY;
                })), operators.takeUntil(mouseup));
            })));
            /** @type {?} */
            var touchdrag = touchstart
                .pipe(operators.mergeMap((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.pageY = e.targetTouches[0].pageY;
                _this.top = -parseFloat(getComputedStyle(bar).top);
                return touchmove
                    .pipe(operators.map((/**
                 * @param {?} tmove
                 * @return {?}
                 */
                function (tmove) {
                    return -(_this.top + tmove.targetTouches[0].pageY - _this.pageY);
                })), operators.takeUntil(touchend));
            })));
            /** @type {?} */
            var dragSubscription = rxjs.merge.apply(void 0, __spread([mousedrag, touchdrag])).subscribe((/**
             * @param {?} top
             * @return {?}
             */
            function (top) {
                _this.body.addEventListener('selectstart', _this.preventDefaultEvent, false);
                _this.renderer.setStyle(_this.body, 'touch-action', 'pan-y');
                _this.renderer.setStyle(_this.body, 'user-select', 'none');
                _this.renderer.setStyle(_this.bar, 'top', top + "px");
                /** @type {?} */
                var over = _this.scrollContent(0, true, false);
                /** @type {?} */
                var maxTop = _this.el.offsetHeight - _this.bar.offsetHeight;
                if (over && over < 0 && -over <= maxTop) {
                    _this.renderer.setStyle(_this.el, 'paddingTop', -over + 'px');
                }
                else if (over && over > 0 && over <= maxTop) {
                    _this.renderer.setStyle(_this.el, 'paddingBottom', over + 'px');
                }
            }));
            /** @type {?} */
            var dragEndSubscription = rxjs.merge.apply(void 0, __spread([mouseup, touchend])).subscribe((/**
             * @return {?}
             */
            function () {
                _this.body.removeEventListener('selectstart', _this.preventDefaultEvent, false);
                /** @type {?} */
                var paddingTop = parseInt(_this.el.style.paddingTop, 10);
                /** @type {?} */
                var paddingBottom = parseInt(_this.el.style.paddingBottom, 10);
                _this.renderer.setStyle(_this.body, 'touch-action', 'unset');
                _this.renderer.setStyle(_this.body, 'user-select', 'default');
                if (paddingTop > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
                else if (paddingBottom > 0) {
                    _this.scrollTo(0, 300, 'linear');
                }
            }));
            _this.interactionSubscriptions.add(dragSubscription);
            _this.interactionSubscriptions.add(dragEndSubscription);
        });
        this.preventDefaultEvent = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.preventDefault();
            e.stopPropagation();
        });
        this.viewContainer = viewContainer;
        this.el = viewContainer.element.nativeElement;
        this.body = this.document.querySelector('body');
        this.mutationThrottleTimeout = 50;
    }
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // setup if no changes for enabled for the first time
        if (!this.interactionSubscriptions && this.enabled) {
            this.setup();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.enabled) {
            if (this.enabled) {
                this.setup();
            }
            else {
                this.destroy();
            }
        }
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.setup = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.interactionSubscriptions = new rxjs.Subscription();
        if (this.optionsDefaults) {
            this.options = new slimscrollOptions_class.SlimScrollOptions(this.optionsDefaults).merge(this.options);
        }
        else {
            this.options = new slimscrollOptions_class.SlimScrollOptions(this.options);
        }
        this.setStyle();
        this.wrapContainer();
        this.initGrid();
        this.initBar();
        this.getBarHeight();
        this.initWheel();
        this.initDrag();
        if (!this.options.alwaysVisible) {
            this.hideBarAndGrid();
        }
        if (MutationObserver) {
            if (this.mutationObserver) {
                this.mutationObserver.disconnect();
            }
            this.mutationObserver = new MutationObserver((/**
             * @return {?}
             */
            function () {
                if (_this.mutationThrottleTimeout) {
                    clearTimeout(_this.mutationThrottleTimeout);
                    _this.mutationThrottleTimeout = setTimeout(_this.onMutation.bind(_this), 50);
                }
            }));
            this.mutationObserver.observe(this.el, { subtree: true, childList: true });
        }
        if (this.scrollEvents && this.scrollEvents instanceof core.EventEmitter) {
            /** @type {?} */
            var scrollSubscription = this.scrollEvents.subscribe((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.handleEvent(event); }));
            this.interactionSubscriptions.add(scrollSubscription);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SlimScrollDirective.prototype.handleEvent = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.type === 'scrollToBottom') {
            /** @type {?} */
            var y = this.el.scrollHeight - this.el.clientHeight;
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollToTop') {
            /** @type {?} */
            var y = 0;
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollToPercent' && (e.percent >= 0 && e.percent <= 100)) {
            /** @type {?} */
            var y = Math.round(((this.el.scrollHeight - this.el.clientHeight) / 100) * e.percent);
            this.scrollTo(y, e.duration, e.easing);
        }
        else if (e.type === 'scrollTo') {
            /** @type {?} */
            var y = e.y;
            if (y <= this.el.scrollHeight - this.el.clientHeight && y >= 0) {
                this.scrollTo(y, e.duration, e.easing);
            }
        }
        else if (e.type === 'recalculate') {
            this.getBarHeight();
        }
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.setStyle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.el;
        this.renderer.setStyle(el, 'overflow', 'hidden');
        this.renderer.setStyle(el, 'position', 'relative');
        this.renderer.setStyle(el, 'display', 'block');
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.onMutation = /**
     * @return {?}
     */
    function () {
        this.getBarHeight();
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.wrapContainer = /**
     * @return {?}
     */
    function () {
        this.wrapper = this.renderer.createElement('div');
        /** @type {?} */
        var wrapper = this.wrapper;
        /** @type {?} */
        var el = this.el;
        this.renderer.addClass(wrapper, 'slimscroll-wrapper');
        this.renderer.setStyle(wrapper, 'position', 'relative');
        this.renderer.setStyle(wrapper, 'overflow', 'hidden');
        this.renderer.setStyle(wrapper, 'display', 'inline-block');
        this.renderer.setStyle(wrapper, 'margin', getComputedStyle(el).margin);
        this.renderer.setStyle(wrapper, 'width', '100%');
        this.renderer.setStyle(wrapper, 'height', getComputedStyle(el).height);
        this.renderer.insertBefore(el.parentNode, wrapper, el);
        this.renderer.appendChild(wrapper, el);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.initGrid = /**
     * @return {?}
     */
    function () {
        this.grid = this.renderer.createElement('div');
        /** @type {?} */
        var grid = this.grid;
        this.renderer.addClass(grid, 'slimscroll-grid');
        this.renderer.setStyle(grid, 'position', 'absolute');
        this.renderer.setStyle(grid, 'top', '0');
        this.renderer.setStyle(grid, 'bottom', '0');
        this.renderer.setStyle(grid, this.options.position, '0');
        this.renderer.setStyle(grid, 'width', this.options.gridWidth + "px");
        this.renderer.setStyle(grid, 'background', this.options.gridBackground);
        this.renderer.setStyle(grid, 'opacity', this.options.gridOpacity);
        this.renderer.setStyle(grid, 'display', 'block');
        this.renderer.setStyle(grid, 'cursor', 'pointer');
        this.renderer.setStyle(grid, 'z-index', '99');
        this.renderer.setStyle(grid, 'border-radius', this.options.gridBorderRadius + "px");
        this.renderer.setStyle(grid, 'margin', this.options.gridMargin);
        this.renderer.appendChild(this.wrapper, grid);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.initBar = /**
     * @return {?}
     */
    function () {
        this.bar = this.renderer.createElement('div');
        /** @type {?} */
        var bar = this.bar;
        this.renderer.addClass(bar, 'slimscroll-bar');
        this.renderer.setStyle(bar, 'position', 'absolute');
        this.renderer.setStyle(bar, 'top', '0');
        this.renderer.setStyle(bar, this.options.position, '0');
        this.renderer.setStyle(bar, 'width', this.options.barWidth + "px");
        this.renderer.setStyle(bar, 'background', this.options.barBackground);
        this.renderer.setStyle(bar, 'opacity', this.options.barOpacity);
        this.renderer.setStyle(bar, 'display', 'block');
        this.renderer.setStyle(bar, 'cursor', 'pointer');
        this.renderer.setStyle(bar, 'z-index', '100');
        this.renderer.setStyle(bar, 'border-radius', this.options.barBorderRadius + "px");
        this.renderer.setStyle(bar, 'margin', this.options.barMargin);
        this.renderer.appendChild(this.wrapper, bar);
        this.barVisibilityChange.emit(true);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.getBarHeight = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var elHeight = this.el.offsetHeight;
        /** @type {?} */
        var barHeight = Math.max((elHeight / this.el.scrollHeight) * elHeight, 30) + 'px';
        /** @type {?} */
        var display = parseInt(barHeight, 10) === elHeight ? 'none' : 'block';
        if (this.wrapper.offsetHeight !== elHeight) {
            this.renderer.setStyle(this.wrapper, 'height', elHeight + 'px');
        }
        this.renderer.setStyle(this.bar, 'height', barHeight);
        this.renderer.setStyle(this.bar, 'display', display);
        this.renderer.setStyle(this.grid, 'display', display);
        this.barVisibilityChange.emit(display !== 'none');
    };
    /**
     * @param {?} y
     * @param {?} duration
     * @param {?} easingFunc
     * @return {?}
     */
    SlimScrollDirective.prototype.scrollTo = /**
     * @param {?} y
     * @param {?} duration
     * @param {?} easingFunc
     * @return {?}
     */
    function (y, duration, easingFunc) {
        var _this = this;
        /** @type {?} */
        var start = Date.now();
        /** @type {?} */
        var from = this.el.scrollTop;
        /** @type {?} */
        var maxTop = this.el.offsetHeight - this.bar.offsetHeight;
        /** @type {?} */
        var maxElScrollTop = this.el.scrollHeight - this.el.clientHeight;
        /** @type {?} */
        var barHeight = Math.max((this.el.offsetHeight / this.el.scrollHeight) * this.el.offsetHeight, 30);
        /** @type {?} */
        var paddingTop = parseInt(this.el.style.paddingTop, 10) || 0;
        /** @type {?} */
        var paddingBottom = parseInt(this.el.style.paddingBottom, 10) || 0;
        /** @type {?} */
        var scroll = (/**
         * @param {?} timestamp
         * @return {?}
         */
        function (timestamp) {
            /** @type {?} */
            var currentTime = Date.now();
            /** @type {?} */
            var time = Math.min(1, ((currentTime - start) / duration));
            /** @type {?} */
            var easedTime = exports.easing[easingFunc](time);
            if (paddingTop > 0 || paddingBottom > 0) {
                /** @type {?} */
                var fromY = null;
                if (paddingTop > 0) {
                    fromY = -paddingTop;
                    fromY = -((easedTime * (y - fromY)) + fromY);
                    _this.renderer.setStyle(_this.el, 'paddingTop', fromY + "px");
                }
                if (paddingBottom > 0) {
                    fromY = paddingBottom;
                    fromY = ((easedTime * (y - fromY)) + fromY);
                    _this.renderer.setStyle(_this.el, 'paddingBottom', fromY + "px");
                }
            }
            else {
                _this.el.scrollTop = (easedTime * (y - from)) + from;
            }
            /** @type {?} */
            var percentScroll = _this.el.scrollTop / maxElScrollTop;
            if (paddingBottom === 0) {
                /** @type {?} */
                var delta = Math.round(Math.round(_this.el.clientHeight * percentScroll) - barHeight);
                if (delta > 0) {
                    _this.renderer.setStyle(_this.bar, 'top', delta + "px");
                }
            }
            if (time < 1) {
                requestAnimationFrame(scroll);
            }
        });
        requestAnimationFrame(scroll);
    };
    /**
     * @param {?} y
     * @param {?} isWheel
     * @param {?} isJump
     * @return {?}
     */
    SlimScrollDirective.prototype.scrollContent = /**
     * @param {?} y
     * @param {?} isWheel
     * @param {?} isJump
     * @return {?}
     */
    function (y, isWheel, isJump) {
        var _this = this;
        /** @type {?} */
        var delta = y;
        /** @type {?} */
        var maxTop = this.el.offsetHeight - this.bar.offsetHeight;
        /** @type {?} */
        var hiddenContent = this.el.scrollHeight - this.el.offsetHeight;
        /** @type {?} */
        var percentScroll;
        /** @type {?} */
        var over = null;
        if (isWheel) {
            delta = parseInt(getComputedStyle(this.bar).top, 10) + y * 20 / 100 * this.bar.offsetHeight;
            if (delta < 0 || delta > maxTop) {
                over = delta > maxTop ? delta - maxTop : delta;
            }
            delta = Math.min(Math.max(delta, 0), maxTop);
            delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);
            this.renderer.setStyle(this.bar, 'top', delta + 'px');
        }
        percentScroll = parseInt(getComputedStyle(this.bar).top, 10) / (this.el.offsetHeight - this.bar.offsetHeight);
        delta = percentScroll * hiddenContent;
        this.el.scrollTop = delta;
        this.showBarAndGrid();
        if (!this.options.alwaysVisible) {
            if (this.visibleTimeout) {
                clearTimeout(this.visibleTimeout);
            }
            this.visibleTimeout = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.hideBarAndGrid();
            }), this.options.visibleTimeout);
        }
        /** @type {?} */
        var isScrollAtStart = delta === 0;
        /** @type {?} */
        var isScrollAtEnd = delta === hiddenContent;
        /** @type {?} */
        var scrollPosition = Math.ceil(delta);
        /** @type {?} */
        var scrollState = new slimscrollState_class.SlimScrollState({ scrollPosition: scrollPosition, isScrollAtStart: isScrollAtStart, isScrollAtEnd: isScrollAtEnd });
        this.scrollChanged.emit(scrollState);
        return over;
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.showBarAndGrid = /**
     * @return {?}
     */
    function () {
        this.renderer.setStyle(this.grid, 'background', this.options.gridBackground);
        this.renderer.setStyle(this.bar, 'background', this.options.barBackground);
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.hideBarAndGrid = /**
     * @return {?}
     */
    function () {
        this.renderer.setStyle(this.grid, 'background', 'transparent');
        this.renderer.setStyle(this.bar, 'background', 'transparent');
    };
    /**
     * @return {?}
     */
    SlimScrollDirective.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
        if (this.el.parentElement.classList.contains('slimscroll-wrapper')) {
            /** @type {?} */
            var wrapper = this.el.parentElement;
            /** @type {?} */
            var bar = wrapper.querySelector('.slimscroll-bar');
            wrapper.removeChild(bar);
            /** @type {?} */
            var grid = wrapper.querySelector('.slimscroll-grid');
            wrapper.removeChild(grid);
            this.unwrap(wrapper);
        }
        if (this.interactionSubscriptions) {
            this.interactionSubscriptions.unsubscribe();
        }
    };
    /**
     * @param {?} wrapper
     * @return {?}
     */
    SlimScrollDirective.prototype.unwrap = /**
     * @param {?} wrapper
     * @return {?}
     */
    function (wrapper) {
        /** @type {?} */
        var docFrag = document.createDocumentFragment();
        while (wrapper.firstChild) {
            /** @type {?} */
            var child = wrapper.removeChild(wrapper.firstChild);
            docFrag.appendChild(child);
        }
        wrapper.parentNode.replaceChild(docFrag, wrapper);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SlimScrollDirective.prototype.onResize = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.getBarHeight();
    };
    SlimScrollDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[slimScroll]',
                    // tslint:disable-line
                    exportAs: 'slimScroll'
                },] }
    ];
    /** @nocollapse */
    SlimScrollDirective.ctorParameters = function () { return [
        { type: core.ViewContainerRef, decorators: [{ type: core.Inject, args: [core.ViewContainerRef,] }] },
        { type: core.Renderer2, decorators: [{ type: core.Inject, args: [core.Renderer2,] }] },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: core.Inject, args: [slimscrollOptions_class.SLIMSCROLL_DEFAULTS,] }, { type: core.Optional }] }
    ]; };
    SlimScrollDirective.propDecorators = {
        enabled: [{ type: core.Input }],
        options: [{ type: core.Input }],
        scrollEvents: [{ type: core.Input }],
        scrollChanged: [{ type: core.Output }],
        barVisibilityChange: [{ type: core.Output }],
        onResize: [{ type: core.HostListener, args: ['window:resize', ['$event'],] }]
    };
    return SlimScrollDirective;
}());
exports.SlimScrollDirective = SlimScrollDirective;
if (false) {
    /** @type {?} */
    SlimScrollDirective.prototype.enabled;
    /** @type {?} */
    SlimScrollDirective.prototype.options;
    /** @type {?} */
    SlimScrollDirective.prototype.scrollEvents;
    /** @type {?} */
    SlimScrollDirective.prototype.scrollChanged;
    /** @type {?} */
    SlimScrollDirective.prototype.barVisibilityChange;
    /** @type {?} */
    SlimScrollDirective.prototype.el;
    /** @type {?} */
    SlimScrollDirective.prototype.wrapper;
    /** @type {?} */
    SlimScrollDirective.prototype.grid;
    /** @type {?} */
    SlimScrollDirective.prototype.bar;
    /** @type {?} */
    SlimScrollDirective.prototype.body;
    /** @type {?} */
    SlimScrollDirective.prototype.pageY;
    /** @type {?} */
    SlimScrollDirective.prototype.top;
    /** @type {?} */
    SlimScrollDirective.prototype.dragging;
    /** @type {?} */
    SlimScrollDirective.prototype.mutationThrottleTimeout;
    /** @type {?} */
    SlimScrollDirective.prototype.mutationObserver;
    /** @type {?} */
    SlimScrollDirective.prototype.lastTouchPositionY;
    /** @type {?} */
    SlimScrollDirective.prototype.visibleTimeout;
    /** @type {?} */
    SlimScrollDirective.prototype.interactionSubscriptions;
    /** @type {?} */
    SlimScrollDirective.prototype.initWheel;
    /** @type {?} */
    SlimScrollDirective.prototype.initDrag;
    /** @type {?} */
    SlimScrollDirective.prototype.preventDefaultEvent;
    /**
     * @type {?}
     * @private
     */
    SlimScrollDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    SlimScrollDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SlimScrollDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    SlimScrollDirective.prototype.optionsDefaults;
}

});

var slimscroll_directive$1 = unwrapExports(slimscroll_directive);
var slimscroll_directive_1 = slimscroll_directive.easing;
var slimscroll_directive_2 = slimscroll_directive.SlimScrollDirective;

var ngxSlimscroll_module = createCommonjsModule(function (module, exports) {
"use strict";
/**
 * @fileoverview added by tsickle
 * Generated from: src/module/ngx-slimscroll.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });


var NgSlimScrollModule = /** @class */ (function () {
    function NgSlimScrollModule() {
    }
    NgSlimScrollModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        slimscroll_directive.SlimScrollDirective
                    ],
                    exports: [
                        slimscroll_directive.SlimScrollDirective
                    ]
                },] }
    ];
    return NgSlimScrollModule;
}());
exports.NgSlimScrollModule = NgSlimScrollModule;

});

var ngxSlimscroll_module$1 = unwrapExports(ngxSlimscroll_module);
var ngxSlimscroll_module_1 = ngxSlimscroll_module.NgSlimScrollModule;

var public_api = createCommonjsModule(function (module, exports) {
"use strict";
/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });

exports.SlimScrollEvent = slimscrollEvent_class.SlimScrollEvent;

exports.SLIMSCROLL_DEFAULTS = slimscrollOptions_class.SLIMSCROLL_DEFAULTS;
exports.SlimScrollOptions = slimscrollOptions_class.SlimScrollOptions;

exports.easing = slimscroll_directive.easing;
exports.SlimScrollDirective = slimscroll_directive.SlimScrollDirective;

exports.NgSlimScrollModule = ngxSlimscroll_module.NgSlimScrollModule;

});

var public_api$1 = unwrapExports(public_api);
var public_api_1 = public_api.SlimScrollEvent;
var public_api_2 = public_api.SLIMSCROLL_DEFAULTS;
var public_api_3 = public_api.SlimScrollOptions;
var public_api_4 = public_api.easing;
var public_api_5 = public_api.SlimScrollDirective;
var public_api_6 = public_api.NgSlimScrollModule;

var ngxSlimscroll = createCommonjsModule(function (module, exports) {
"use strict";
/**
 * @fileoverview added by tsickle
 * Generated from: ngx-slimscroll.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generated bundle index. Do not edit.
 */

exports.SlimScrollEvent = public_api.SlimScrollEvent;
exports.SLIMSCROLL_DEFAULTS = public_api.SLIMSCROLL_DEFAULTS;
exports.SlimScrollOptions = public_api.SlimScrollOptions;
exports.easing = public_api.easing;
exports.SlimScrollDirective = public_api.SlimScrollDirective;
exports.NgSlimScrollModule = public_api.NgSlimScrollModule;

});

var ngxSlimscroll$1 = unwrapExports(ngxSlimscroll);
var ngxSlimscroll_1 = ngxSlimscroll.SlimScrollEvent;
var ngxSlimscroll_2 = ngxSlimscroll.SLIMSCROLL_DEFAULTS;
var ngxSlimscroll_3 = ngxSlimscroll.SlimScrollOptions;
var ngxSlimscroll_4 = ngxSlimscroll.easing;
var ngxSlimscroll_5 = ngxSlimscroll.SlimScrollDirective;
var ngxSlimscroll_6 = ngxSlimscroll.NgSlimScrollModule;

export default ngxSlimscroll$1;
export { ngxSlimscroll_6 as NgSlimScrollModule, ngxSlimscroll_2 as SLIMSCROLL_DEFAULTS, ngxSlimscroll_5 as SlimScrollDirective, ngxSlimscroll_1 as SlimScrollEvent, ngxSlimscroll_3 as SlimScrollOptions, ngxSlimscroll_4 as easing };
//# sourceMappingURL=ngx-slimscroll.js.map
