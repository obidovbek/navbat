/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
/** @type {?} */
const defaults = {
    contentsCss: [''],
    customConfig: ''
};
export class CKEditorComponent {
    /**
     * @param {?} ngZone
     * @param {?} hostEl
     */
    constructor(ngZone, hostEl) {
        this.ngZone = ngZone;
        this.hostEl = hostEl;
        this.innerValue = '';
        this.disabled = false;
        this.editorInitialized = false;
        /**
         * Is readonly mode, default:false
         */
        this.readonly = false;
        /**
         * The ck-editor config object.
         */
        this.config = {};
        /**
         * The special skin, default: moono-lisa
         */
        this.skin = 'moono-lisa';
        /**
         * The special language, default: en
         */
        this.language = 'en';
        /**
         * Use fullpage mode, default:false
         */
        this.fullPage = false;
        /**
         * Use inline mode, default: false
         */
        this.inline = false;
        this.change = new EventEmitter();
        this.ready = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.onChange = (/**
         * @param {?} value
         * @return {?}
         */
        (value) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        this.identifier = CKEditorComponent.getRandomIdentifier(this.id);
    }
    /**
     * @private
     * @param {?=} id
     * @return {?}
     */
    static getRandomIdentifier(id = '') {
        return 'editor-' + (id !== '' ? id : String(CKEditorComponent.idx++));
    }
    /**
     * @return {?}
     */
    get instance() {
        return this.ckIns;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.editorInitialized) {
            this.destroyEditor();
            this.initEditor(this.identifier);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (!this.editorInitialized && this.documentContains(this.textareaRef.nativeElement)) {
            this.editorInitialized = true;
            this.initEditor(this.identifier);
        }
        else if (this.editorInitialized && !this.documentContains(this.textareaRef.nativeElement)) {
            this.editorInitialized = false;
            this.destroyEditor();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyEditor();
    }
    /**
     * @private
     * @param {?} identifier
     * @return {?}
     */
    initEditor(identifier) {
        if (typeof CKEDITOR === 'undefined') {
            return console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');
        }
        /** @type {?} */
        const textareaEl = this.textareaRef.nativeElement;
        this.identifier = identifier;
        textareaEl.setAttribute('name', this.identifier);
        if (this.ckIns || !this.documentContains(this.textareaRef.nativeElement)) {
            return;
        }
        /** @type {?} */
        const opt = Object.assign({}, defaults, this.config, {
            readOnly: this.readonly,
            skin: this.skin,
            language: this.language,
            fullPage: this.fullPage,
            inline: this.inline
        });
        this.ckIns = this.inline ? CKEDITOR.inline(textareaEl, opt) : CKEDITOR.replace(textareaEl, opt);
        this.ckIns.setData(this.innerValue);
        this.ckIns.on('change', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const val = this.ckIns.getData();
            this.updateValue(val);
        }));
        this.ckIns.on('instanceReady', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.ngZone.run((/**
             * @return {?}
             */
            () => {
                this.ready.emit(evt);
            }));
        }));
        this.ckIns.on('blur', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.ngZone.run((/**
             * @return {?}
             */
            () => {
                this.blur.emit(evt);
                this.onTouched();
            }));
        }));
        this.ckIns.on('focus', (/**
         * @param {?} evt
         * @return {?}
         */
        (evt) => {
            this.ngZone.run((/**
             * @return {?}
             */
            () => {
                this.focus.emit(evt);
            }));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    destroyEditor() {
        if (this.ckIns) {
            // If use destroy, will fire 'Error code: editor-destroy-iframe'
            // this.ckIns.destroy();
            if (CKEDITOR.instances.hasOwnProperty(this.ckIns.name)) {
                CKEDITOR.remove(CKEDITOR.instances[this.ckIns.name]);
            }
            this.ckIns = null;
            /** @type {?} */
            const editorEl = this.hostEl.nativeElement.querySelector('#cke_' + this.identifier);
            if (editorEl != null && editorEl.parentElement) {
                editorEl.parentElement.removeChild(editorEl);
            }
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        this.ngZone.run((/**
         * @return {?}
         */
        () => {
            this.innerValue = value;
            this.onChange(value);
            this.onTouched();
            this.change.emit(value);
        }));
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    documentContains(node) {
        return document.contains ? document.contains(node) : document.body.contains(node);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.innerValue = value || '';
        if (this.ckIns) {
            // Fix bug that can't emit change event when set non-html tag value twice in fullpage mode.
            this.ckIns.setData(this.innerValue);
            /** @type {?} */
            const val = this.ckIns.getData();
            this.ckIns.setData(val);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
CKEditorComponent.idx = 1;
CKEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'ck-editor',
                template: `
    <textarea #textarea></textarea>
  `,
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => CKEditorComponent)), multi: true }],
                exportAs: 'ckEditor'
            }] }
];
/** @nocollapse */
CKEditorComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef }
];
CKEditorComponent.propDecorators = {
    readonly: [{ type: Input }],
    config: [{ type: Input }],
    skin: [{ type: Input }],
    language: [{ type: Input }],
    fullPage: [{ type: Input }],
    inline: [{ type: Input }],
    id: [{ type: Input }],
    change: [{ type: Output }],
    ready: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    textareaRef: [{ type: ViewChild, args: ['textarea', { static: false },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    CKEditorComponent.idx;
    /**
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.ckIns;
    /**
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.innerValue;
    /**
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.identifier;
    /**
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.editorInitialized;
    /**
     * Is readonly mode, default:false
     * @type {?}
     */
    CKEditorComponent.prototype.readonly;
    /**
     * The ck-editor config object.
     * @type {?}
     */
    CKEditorComponent.prototype.config;
    /**
     * The special skin, default: moono-lisa
     * @type {?}
     */
    CKEditorComponent.prototype.skin;
    /**
     * The special language, default: en
     * @type {?}
     */
    CKEditorComponent.prototype.language;
    /**
     * Use fullpage mode, default:false
     * @type {?}
     */
    CKEditorComponent.prototype.fullPage;
    /**
     * Use inline mode, default: false
     * @type {?}
     */
    CKEditorComponent.prototype.inline;
    /**
     * The editor id
     * @type {?}
     */
    CKEditorComponent.prototype.id;
    /** @type {?} */
    CKEditorComponent.prototype.change;
    /** @type {?} */
    CKEditorComponent.prototype.ready;
    /** @type {?} */
    CKEditorComponent.prototype.blur;
    /** @type {?} */
    CKEditorComponent.prototype.focus;
    /** @type {?} */
    CKEditorComponent.prototype.textareaRef;
    /** @type {?} */
    CKEditorComponent.prototype.onChange;
    /** @type {?} */
    CKEditorComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    CKEditorComponent.prototype.hostEl;
}
//# sourceMappingURL=data:application/json;base64,