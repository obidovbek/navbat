/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * callPrint
 * \@param printWindow
 * \@param iframe
 * @type {?}
 */
export var callPrint = (/**
 * @param {?} printWindow
 * @param {?} iframe
 * @return {?}
 */
function (printWindow, iframe) {
    if (printWindow && printWindow.printPage) {
        printWindow.printPage();
        if (iframe) {
            document.body.removeChild(iframe);
        }
    }
    else {
        setTimeout((/**
         * @return {?}
         */
        function () {
            callPrint(printWindow, iframe);
        }), 50);
    }
});
/**
 * getBaseHref
 * \@return
 * @type {?}
 */
export var getBaseHref = (/**
 * @return {?}
 */
function () {
    /** @type {?} */
    var port = (window.location.port) ? ":" + window.location.port : '';
    return window.location.protocol + "//" + window.location.hostname + port + window.location.pathname;
});
/**
 * getMarkup
 * \@param elementHtml
 * \@param options
 * \@return
 * @type {?}
 */
export var getMarkup = (/**
 * @param {?} elementHtml
 * @param {?} options
 * @return {?}
 */
function (elementHtml, options) {
    /** @type {?} */
    var template = options.templateString;
    /** @type {?} */
    var templateRegex = new RegExp(/{{\s*printBody\s*}}/gi);
    /** @type {?} */
    var stylesheets;
    /** @type {?} */
    var styles;
    /** @type {?} */
    var html = [];
    if (template && templateRegex.test(template)) {
        elementHtml = template.replace(templateRegex, elementHtml);
    }
    html.push("<html><head><title>" + (options.pageTitle || '') + "</title>");
    // If stylesheet URL's or list of stylesheet URL's are specified, override page stylesheets
    if (options.stylesheets) {
        stylesheets = Array.isArray(options.stylesheets) ? options.stylesheets : [options.stylesheets];
    }
    else {
        stylesheets = Array.prototype.slice
            .call(document.getElementsByTagName('link'))
            .map((/**
         * @param {?} link
         * @return {?}
         */
        function (link) { return link; }));
    }
    stylesheets.forEach((/**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        html.push("<link rel=\"" + f.rel + "\" href=\"" + f.href + "\">");
    }));
    // If inline styles or list of inline styles are specified, override inline styles
    if (options.styles) {
        styles = Array.isArray(options.styles) ? tslib_1.__spread(options.styles, [".print-none { display: none; }"]) : [options.styles + ".print-none { display: none; }"];
    }
    else {
        styles = Array.prototype.slice
            .call(document.getElementsByTagName('style'))
            .map((/**
         * @param {?} style
         * @return {?}
         */
        function (style) { return style.innerHTML; }));
    }
    styles.forEach((/**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        html.push("<style type=\"text/css\">" + style + "</style>");
    }));
    html.push("<base href=\"" + getBaseHref() + "\"/>");
    html.push('</head><body class="pe-body">');
    html.push(elementHtml);
    html.push("\n    <script type=\"text/javascript\">\n      function printPage() {\n        focus();\n        print();\n        " + (options.printMode.toLowerCase() === 'popup' ? 'close();' : '') + "\n      }\n    </script>\n  ");
    html.push('</body></html>');
    return html.join('');
});
/**
 * printHtml
 * \@param element
 * \@param selfOptions
 * @type {?}
 */
export var printHtml = (/**
 * @param {?} element
 * @param {?=} selfOptions
 * @return {?}
 */
function (element, selfOptions) {
    if (selfOptions === void 0) { selfOptions = {}; }
    /** @type {?} */
    var defaultOptions = {
        htmlType: 'domObj',
        printMode: 'template',
        pageTitle: '',
        templateString: '',
        popupProperties: '',
        stylesheets: null,
        styles: null
    };
    /** @type {?} */
    var options = tslib_1.__assign({}, defaultOptions, selfOptions);
    /** @type {?} */
    var html = element;
    if (options.htmlType === 'domObj') {
        html = element.outerHTML;
    }
    // Get markup to be printed
    /** @type {?} */
    var markup = getMarkup(html, options);
    /** @type {?} */
    var printWindow;
    /** @type {?} */
    var printIframe;
    /** @type {?} */
    var printDocument;
    /** @type {?} */
    var printElementID;
    if (options.printMode.toLowerCase() === 'popup') {
        printWindow = window.open('about:blank', 'printElementWindow', options.popupProperties);
        printDocument = printWindow && printWindow.document;
    }
    else {
        printElementID = "printElement_" + (Math.round(Math.random() * 99999)).toString();
        printIframe = document.createElement('iframe');
        printIframe.setAttribute('id', printElementID);
        printIframe.setAttribute('src', 'about:blank');
        printIframe.setAttribute('frameBorder', '0');
        printIframe.setAttribute('scrolling', 'no');
        printIframe.setAttribute('style', 'position:fixed;bottom:100%;right:100%;');
        document.body.appendChild(printIframe);
        printDocument = (printIframe.contentWindow || printIframe.contentDocument);
        if (printDocument.document) {
            printDocument = printDocument.document;
        }
        printIframe = ((/** @type {?} */ (document))).frames ? ((/** @type {?} */ (document))).frames[printElementID] : document.getElementById(printElementID);
        printWindow = printIframe.contentWindow || printIframe;
    }
    focus();
    printDocument.open();
    // SetTimeout fixesiframe printMode does not work in firefox
    setTimeout((/**
     * @return {?}
     */
    function () {
        printDocument.write(markup);
        printDocument.close();
    }));
    callPrint(printWindow, printIframe);
});
//# sourceMappingURL=data:application/json;base64,