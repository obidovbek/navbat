/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * callPrint
 * \@param printWindow
 * \@param iframe
 * @type {?}
 */
export const callPrint = (/**
 * @param {?} printWindow
 * @param {?} iframe
 * @return {?}
 */
(printWindow, iframe) => {
    if (printWindow && printWindow.printPage) {
        printWindow.printPage();
        if (iframe) {
            document.body.removeChild(iframe);
        }
    }
    else {
        setTimeout((/**
         * @return {?}
         */
        () => {
            callPrint(printWindow, iframe);
        }), 50);
    }
});
/**
 * getBaseHref
 * \@return
 * @type {?}
 */
export const getBaseHref = (/**
 * @return {?}
 */
() => {
    /** @type {?} */
    const port = (window.location.port) ? `:${window.location.port}` : '';
    return `${window.location.protocol}//${window.location.hostname}${port}${window.location.pathname}`;
});
/**
 * getMarkup
 * \@param elementHtml
 * \@param options
 * \@return
 * @type {?}
 */
export const getMarkup = (/**
 * @param {?} elementHtml
 * @param {?} options
 * @return {?}
 */
(elementHtml, options) => {
    /** @type {?} */
    const template = options.templateString;
    /** @type {?} */
    const templateRegex = new RegExp(/{{\s*printBody\s*}}/gi);
    /** @type {?} */
    let stylesheets;
    /** @type {?} */
    let styles;
    /** @type {?} */
    const html = [];
    if (template && templateRegex.test(template)) {
        elementHtml = template.replace(templateRegex, elementHtml);
    }
    html.push(`<html><head><title>${options.pageTitle || ''}</title>`);
    // If stylesheet URL's or list of stylesheet URL's are specified, override page stylesheets
    if (options.stylesheets) {
        stylesheets = Array.isArray(options.stylesheets) ? options.stylesheets : [options.stylesheets];
    }
    else {
        stylesheets = Array.prototype.slice
            .call(document.getElementsByTagName('link'))
            .map((/**
         * @param {?} link
         * @return {?}
         */
        link => link));
    }
    stylesheets.forEach((/**
     * @param {?} f
     * @return {?}
     */
    (f) => {
        html.push(`<link rel="${f.rel}" href="${f.href}">`);
    }));
    // If inline styles or list of inline styles are specified, override inline styles
    if (options.styles) {
        styles = Array.isArray(options.styles) ? [...options.styles, `.print-none { display: none; }`] : [options.styles + `.print-none { display: none; }`];
    }
    else {
        styles = Array.prototype.slice
            .call(document.getElementsByTagName('style'))
            .map((/**
         * @param {?} style
         * @return {?}
         */
        style => style.innerHTML));
    }
    styles.forEach((/**
     * @param {?} style
     * @return {?}
     */
    (style) => {
        html.push(`<style type="text/css">${style}</style>`);
    }));
    html.push(`<base href="${getBaseHref()}"/>`);
    html.push('</head><body class="pe-body">');
    html.push(elementHtml);
    html.push(`
    <script type="text/javascript">
      function printPage() {
        focus();
        print();
        ${options.printMode.toLowerCase() === 'popup' ? 'close();' : ''}
      }
    </script>
  `);
    html.push('</body></html>');
    return html.join('');
});
/**
 * printHtml
 * \@param element
 * \@param selfOptions
 * @type {?}
 */
export const printHtml = (/**
 * @param {?} element
 * @param {?=} selfOptions
 * @return {?}
 */
(element, selfOptions = {}) => {
    /** @type {?} */
    const defaultOptions = {
        htmlType: 'domObj',
        printMode: 'template',
        pageTitle: '',
        templateString: '',
        popupProperties: '',
        stylesheets: null,
        styles: null
    };
    /** @type {?} */
    const options = Object.assign({}, defaultOptions, selfOptions);
    /** @type {?} */
    let html = element;
    if (options.htmlType === 'domObj') {
        html = element.outerHTML;
    }
    // Get markup to be printed
    /** @type {?} */
    const markup = getMarkup(html, options);
    /** @type {?} */
    let printWindow;
    /** @type {?} */
    let printIframe;
    /** @type {?} */
    let printDocument;
    /** @type {?} */
    let printElementID;
    if (options.printMode.toLowerCase() === 'popup') {
        printWindow = window.open('about:blank', 'printElementWindow', options.popupProperties);
        printDocument = printWindow && printWindow.document;
    }
    else {
        printElementID = `printElement_${(Math.round(Math.random() * 99999)).toString()}`;
        printIframe = document.createElement('iframe');
        printIframe.setAttribute('id', printElementID);
        printIframe.setAttribute('src', 'about:blank');
        printIframe.setAttribute('frameBorder', '0');
        printIframe.setAttribute('scrolling', 'no');
        printIframe.setAttribute('style', 'position:fixed;bottom:100%;right:100%;');
        document.body.appendChild(printIframe);
        printDocument = (printIframe.contentWindow || printIframe.contentDocument);
        if (printDocument.document) {
            printDocument = printDocument.document;
        }
        printIframe = ((/** @type {?} */ (document))).frames ? ((/** @type {?} */ (document))).frames[printElementID] : document.getElementById(printElementID);
        printWindow = printIframe.contentWindow || printIframe;
    }
    focus();
    printDocument.open();
    // SetTimeout fixesiframe printMode does not work in firefox
    setTimeout((/**
     * @return {?}
     */
    () => {
        printDocument.write(markup);
        printDocument.close();
    }));
    callPrint(printWindow, printIframe);
});
//# sourceMappingURL=data:application/json;base64,