/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { printHtml } from './ngx-print-element.helper';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function Config() { }
if (false) {
    /** @type {?|undefined} */
    Config.prototype.htmlType;
    /** @type {?|undefined} */
    Config.prototype.printMode;
    /** @type {?|undefined} */
    Config.prototype.pageTitle;
    /** @type {?|undefined} */
    Config.prototype.templateString;
    /** @type {?|undefined} */
    Config.prototype.popupProperties;
    /** @type {?|undefined} */
    Config.prototype.stylesheets;
    /** @type {?|undefined} */
    Config.prototype.styles;
}
export class NgxPrintElementService {
    /**
     * Print
     * @param {?} id
     * @param {?=} config
     * @return {?}
     */
    print(id, config) {
        // Create and insert new print section
        /** @type {?} */
        const container = document.getElementById(id);
        switch (config && config.printMode) {
            case 'template':
                printHtml(container, Object.assign({}, config, { printMode: '' }));
                break;
            case 'template-popup':
                printHtml(container, Object.assign({}, config, { printMode: 'popup' }));
                break;
            default:
                if (container) {
                    // Declare
                    /** @type {?} */
                    const domClone = container.cloneNode(true);
                    /** @type {?} */
                    const $printSection = document.createElement('div');
                    // Add visibility hidden into body
                    /** @type {?} */
                    const bodyEl = document.querySelector('body');
                    if (bodyEl) {
                        bodyEl.setAttribute('style', 'visibility: hidden !important;');
                    }
                    // Clone element container
                    $printSection.id = 'ngx-print-element';
                    $printSection.appendChild(domClone);
                    document.body.insertBefore($printSection, document.body.firstChild);
                    // Print
                    window.print();
                    // Clean up print section for future use
                    /** @type {?} */
                    const oldElem = document.getElementById('ngx-print-element');
                    if (oldElem) {
                        oldElem.parentNode && oldElem.parentNode.removeChild(oldElem);
                        oldElem.remove();
                    }
                    // Clear visibility: hidden
                    bodyEl && (bodyEl.style.visibility = '');
                }
                break;
        }
    }
}
NgxPrintElementService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ NgxPrintElementService.ngInjectableDef = i0.defineInjectable({ factory: function NgxPrintElementService_Factory() { return new NgxPrintElementService(); }, token: NgxPrintElementService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByaW50LWVsZW1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wcmludC1lbGVtZW50LyIsInNvdXJjZXMiOlsibGliL25neC1wcmludC1lbGVtZW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7OztBQUV2RCw0QkFXQzs7O0lBVkMsMEJBQWtCOztJQUNsQiwyQkFBbUI7O0lBQ25CLDJCQUFtQjs7SUFDbkIsZ0NBQXdCOztJQUN4QixpQ0FBeUI7O0lBQ3pCLDZCQUdJOztJQUNKLHdCQUFrQjs7QUFNcEIsTUFBTTs7Ozs7OztJQVFHLEtBQUssQ0FBQyxFQUFVLEVBQUUsTUFBZTs7O2NBRWhDLFNBQVMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztRQUM3QyxRQUFRLE1BQU0sSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ2xDLEtBQUssVUFBVTtnQkFDYixTQUFTLENBQUMsU0FBUyxvQkFBTyxNQUFNLElBQUUsU0FBUyxFQUFFLEVBQUUsSUFBRyxDQUFDO2dCQUNuRCxNQUFNO1lBQ1IsS0FBSyxnQkFBZ0I7Z0JBQ25CLFNBQVMsQ0FBQyxTQUFTLG9CQUFPLE1BQU0sSUFBRSxTQUFTLEVBQUUsT0FBTyxJQUFHLENBQUM7Z0JBQ3hELE1BQU07WUFDUjtnQkFDRSxJQUFJLFNBQVMsRUFBRTs7OzBCQUVQLFFBQVEsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQzs7MEJBQ3BDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQzs7OzBCQUU3QyxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7b0JBQzdDLElBQUksTUFBTSxFQUFFO3dCQUNWLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLGdDQUFnQyxDQUFDLENBQUM7cUJBQ2hFO29CQUNELDBCQUEwQjtvQkFDMUIsYUFBYSxDQUFDLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQztvQkFDdkMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDcEMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ3BFLFFBQVE7b0JBQ1IsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDOzs7MEJBRVQsT0FBTyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUM7b0JBQzVELElBQUksT0FBTyxFQUFFO3dCQUNYLE9BQU8sQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQzlELE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztxQkFDbEI7b0JBQ0QsMkJBQTJCO29CQUMzQixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsQ0FBQztpQkFDMUM7Z0JBQ0QsTUFBTTtTQUNUO0lBQ0gsQ0FBQzs7O1lBaERGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHByaW50SHRtbCB9IGZyb20gJy4vbmd4LXByaW50LWVsZW1lbnQuaGVscGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBDb25maWcge1xuICBodG1sVHlwZT86IHN0cmluZztcbiAgcHJpbnRNb2RlPzogc3RyaW5nO1xuICBwYWdlVGl0bGU/OiBzdHJpbmc7XG4gIHRlbXBsYXRlU3RyaW5nPzogc3RyaW5nO1xuICBwb3B1cFByb3BlcnRpZXM/OiBzdHJpbmc7XG4gIHN0eWxlc2hlZXRzPzogeyBcbiAgICByZWw/OiBzdHJpbmcsIFxuICAgIGhyZWY/OiBzdHJpbmdcbiAgfVtdLFxuICBzdHlsZXM/OiBzdHJpbmdbXTtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4UHJpbnRFbGVtZW50U2VydmljZSB7XG5cbiAgLyoqXG4gICAqIFByaW50XG4gICAqIEBwYXJhbSBpZCBcbiAgICogQHBhcmFtIGNvbmZpZyBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBwdWJsaWMgcHJpbnQoaWQ6IHN0cmluZywgY29uZmlnPzogQ29uZmlnKTogdm9pZCB7XG4gICAgLy8gQ3JlYXRlIGFuZCBpbnNlcnQgbmV3IHByaW50IHNlY3Rpb25cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgc3dpdGNoIChjb25maWcgJiYgY29uZmlnLnByaW50TW9kZSkge1xuICAgICAgY2FzZSAndGVtcGxhdGUnOlxuICAgICAgICBwcmludEh0bWwoY29udGFpbmVyLCB7IC4uLmNvbmZpZywgcHJpbnRNb2RlOiAnJyB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZW1wbGF0ZS1wb3B1cCc6XG4gICAgICAgIHByaW50SHRtbChjb250YWluZXIsIHsgLi4uY29uZmlnLCBwcmludE1vZGU6ICdwb3B1cCcgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgICAgIC8vIERlY2xhcmVcbiAgICAgICAgICBjb25zdCBkb21DbG9uZSA9IGNvbnRhaW5lci5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgY29uc3QgJHByaW50U2VjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIC8vIEFkZCB2aXNpYmlsaXR5IGhpZGRlbiBpbnRvIGJvZHlcbiAgICAgICAgICBjb25zdCBib2R5RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgICAgICAgaWYgKGJvZHlFbCkge1xuICAgICAgICAgICAgYm9keUVsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAndmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnQ7Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIENsb25lIGVsZW1lbnQgY29udGFpbmVyXG4gICAgICAgICAgJHByaW50U2VjdGlvbi5pZCA9ICduZ3gtcHJpbnQtZWxlbWVudCc7XG4gICAgICAgICAgJHByaW50U2VjdGlvbi5hcHBlbmRDaGlsZChkb21DbG9uZSk7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoJHByaW50U2VjdGlvbiwgZG9jdW1lbnQuYm9keS5maXJzdENoaWxkKTtcbiAgICAgICAgICAvLyBQcmludFxuICAgICAgICAgIHdpbmRvdy5wcmludCgpO1xuICAgICAgICAgIC8vIENsZWFuIHVwIHByaW50IHNlY3Rpb24gZm9yIGZ1dHVyZSB1c2VcbiAgICAgICAgICBjb25zdCBvbGRFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25neC1wcmludC1lbGVtZW50Jyk7XG4gICAgICAgICAgaWYgKG9sZEVsZW0pIHtcbiAgICAgICAgICAgIG9sZEVsZW0ucGFyZW50Tm9kZSAmJiBvbGRFbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkRWxlbSk7XG4gICAgICAgICAgICBvbGRFbGVtLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBDbGVhciB2aXNpYmlsaXR5OiBoaWRkZW5cbiAgICAgICAgICBib2R5RWwgJiYgKGJvZHlFbC5zdHlsZS52aXNpYmlsaXR5ID0gJycpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuIl19