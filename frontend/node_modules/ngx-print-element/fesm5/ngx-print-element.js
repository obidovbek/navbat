import { __assign, __spread } from 'tslib';
import { Injectable, NgModule, Component, Directive, HostListener, Input, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * callPrint
 * \@param printWindow
 * \@param iframe
 * @type {?}
 */
var callPrint = (/**
 * @param {?} printWindow
 * @param {?} iframe
 * @return {?}
 */
function (printWindow, iframe) {
    if (printWindow && printWindow.printPage) {
        printWindow.printPage();
        if (iframe) {
            document.body.removeChild(iframe);
        }
    }
    else {
        setTimeout((/**
         * @return {?}
         */
        function () {
            callPrint(printWindow, iframe);
        }), 50);
    }
});
/**
 * getBaseHref
 * \@return
 * @type {?}
 */
var getBaseHref = (/**
 * @return {?}
 */
function () {
    /** @type {?} */
    var port = (window.location.port) ? ":" + window.location.port : '';
    return window.location.protocol + "//" + window.location.hostname + port + window.location.pathname;
});
/**
 * getMarkup
 * \@param elementHtml
 * \@param options
 * \@return
 * @type {?}
 */
var getMarkup = (/**
 * @param {?} elementHtml
 * @param {?} options
 * @return {?}
 */
function (elementHtml, options) {
    /** @type {?} */
    var template = options.templateString;
    /** @type {?} */
    var templateRegex = new RegExp(/{{\s*printBody\s*}}/gi);
    /** @type {?} */
    var stylesheets;
    /** @type {?} */
    var styles;
    /** @type {?} */
    var html = [];
    if (template && templateRegex.test(template)) {
        elementHtml = template.replace(templateRegex, elementHtml);
    }
    html.push("<html><head><title>" + (options.pageTitle || '') + "</title>");
    // If stylesheet URL's or list of stylesheet URL's are specified, override page stylesheets
    if (options.stylesheets) {
        stylesheets = Array.isArray(options.stylesheets) ? options.stylesheets : [options.stylesheets];
    }
    else {
        stylesheets = Array.prototype.slice
            .call(document.getElementsByTagName('link'))
            .map((/**
         * @param {?} link
         * @return {?}
         */
        function (link) { return link; }));
    }
    stylesheets.forEach((/**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        html.push("<link rel=\"" + f.rel + "\" href=\"" + f.href + "\">");
    }));
    // If inline styles or list of inline styles are specified, override inline styles
    if (options.styles) {
        styles = Array.isArray(options.styles) ? __spread(options.styles, [".print-none { display: none; }"]) : [options.styles + ".print-none { display: none; }"];
    }
    else {
        styles = Array.prototype.slice
            .call(document.getElementsByTagName('style'))
            .map((/**
         * @param {?} style
         * @return {?}
         */
        function (style) { return style.innerHTML; }));
    }
    styles.forEach((/**
     * @param {?} style
     * @return {?}
     */
    function (style) {
        html.push("<style type=\"text/css\">" + style + "</style>");
    }));
    html.push("<base href=\"" + getBaseHref() + "\"/>");
    html.push('</head><body class="pe-body">');
    html.push(elementHtml);
    html.push("\n    <script type=\"text/javascript\">\n      function printPage() {\n        focus();\n        print();\n        " + (options.printMode.toLowerCase() === 'popup' ? 'close();' : '') + "\n      }\n    </script>\n  ");
    html.push('</body></html>');
    return html.join('');
});
/**
 * printHtml
 * \@param element
 * \@param selfOptions
 * @type {?}
 */
var printHtml = (/**
 * @param {?} element
 * @param {?=} selfOptions
 * @return {?}
 */
function (element, selfOptions) {
    if (selfOptions === void 0) { selfOptions = {}; }
    /** @type {?} */
    var defaultOptions = {
        htmlType: 'domObj',
        printMode: 'template',
        pageTitle: '',
        templateString: '',
        popupProperties: '',
        stylesheets: null,
        styles: null
    };
    /** @type {?} */
    var options = __assign({}, defaultOptions, selfOptions);
    /** @type {?} */
    var html = element;
    if (options.htmlType === 'domObj') {
        html = element.outerHTML;
    }
    // Get markup to be printed
    /** @type {?} */
    var markup = getMarkup(html, options);
    /** @type {?} */
    var printWindow;
    /** @type {?} */
    var printIframe;
    /** @type {?} */
    var printDocument;
    /** @type {?} */
    var printElementID;
    if (options.printMode.toLowerCase() === 'popup') {
        printWindow = window.open('about:blank', 'printElementWindow', options.popupProperties);
        printDocument = printWindow && printWindow.document;
    }
    else {
        printElementID = "printElement_" + (Math.round(Math.random() * 99999)).toString();
        printIframe = document.createElement('iframe');
        printIframe.setAttribute('id', printElementID);
        printIframe.setAttribute('src', 'about:blank');
        printIframe.setAttribute('frameBorder', '0');
        printIframe.setAttribute('scrolling', 'no');
        printIframe.setAttribute('style', 'position:fixed;bottom:100%;right:100%;');
        document.body.appendChild(printIframe);
        printDocument = (printIframe.contentWindow || printIframe.contentDocument);
        if (printDocument.document) {
            printDocument = printDocument.document;
        }
        printIframe = ((/** @type {?} */ (document))).frames ? ((/** @type {?} */ (document))).frames[printElementID] : document.getElementById(printElementID);
        printWindow = printIframe.contentWindow || printIframe;
    }
    focus();
    printDocument.open();
    // SetTimeout fixesiframe printMode does not work in firefox
    setTimeout((/**
     * @return {?}
     */
    function () {
        printDocument.write(markup);
        printDocument.close();
    }));
    callPrint(printWindow, printIframe);
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxPrintElementService = /** @class */ (function () {
    function NgxPrintElementService() {
    }
    /**
     * Print
     * @param id
     * @param config
     * @returns
     */
    /**
     * Print
     * @param {?} id
     * @param {?=} config
     * @return {?}
     */
    NgxPrintElementService.prototype.print = /**
     * Print
     * @param {?} id
     * @param {?=} config
     * @return {?}
     */
    function (id, config) {
        // Create and insert new print section
        /** @type {?} */
        var container = document.getElementById(id);
        switch (config && config.printMode) {
            case 'template':
                printHtml(container, __assign({}, config, { printMode: '' }));
                break;
            case 'template-popup':
                printHtml(container, __assign({}, config, { printMode: 'popup' }));
                break;
            default:
                if (container) {
                    // Declare
                    /** @type {?} */
                    var domClone = container.cloneNode(true);
                    /** @type {?} */
                    var $printSection = document.createElement('div');
                    // Add visibility hidden into body
                    /** @type {?} */
                    var bodyEl = document.querySelector('body');
                    if (bodyEl) {
                        bodyEl.setAttribute('style', 'visibility: hidden !important;');
                    }
                    // Clone element container
                    $printSection.id = 'ngx-print-element';
                    $printSection.appendChild(domClone);
                    document.body.insertBefore($printSection, document.body.firstChild);
                    // Print
                    window.print();
                    // Clean up print section for future use
                    /** @type {?} */
                    var oldElem = document.getElementById('ngx-print-element');
                    if (oldElem) {
                        oldElem.parentNode && oldElem.parentNode.removeChild(oldElem);
                        oldElem.remove();
                    }
                    // Clear visibility: hidden
                    bodyEl && (bodyEl.style.visibility = '');
                }
                break;
        }
    };
    NgxPrintElementService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ NgxPrintElementService.ngInjectableDef = defineInjectable({ factory: function NgxPrintElementService_Factory() { return new NgxPrintElementService(); }, token: NgxPrintElementService, providedIn: "root" });
    return NgxPrintElementService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxPrintElementDirective = /** @class */ (function () {
    function NgxPrintElementDirective(prints) {
        this.prints = prints;
        this.print = [];
    }
    /**
     * Print
     * @param event
     */
    /**
     * Print
     * @param {?} event
     * @return {?}
     */
    NgxPrintElementDirective.prototype.onClick = /**
     * Print
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.print && this.print.length === 1) {
            this.prints.print(this.print[0]);
        }
        if (this.print && this.print.length === 2) {
            this.prints.print(this.print[0], this.print[1]);
        }
    };
    NgxPrintElementDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[print]'
                },] }
    ];
    NgxPrintElementDirective.ctorParameters = function () { return [
        { type: NgxPrintElementService }
    ]; };
    NgxPrintElementDirective.propDecorators = {
        print: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return NgxPrintElementDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxPrintElementComponent = /** @class */ (function () {
    function NgxPrintElementComponent(prints) {
        this.prints = prints;
    }
    /**
     * print
     * @param id
     * @param config
     */
    /**
     * print
     * @param {?} id
     * @param {?=} config
     * @return {?}
     */
    NgxPrintElementComponent.prototype.print = /**
     * print
     * @param {?} id
     * @param {?=} config
     * @return {?}
     */
    function (id, config) {
        this.prints.print(id, config);
    };
    NgxPrintElementComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-print-element',
                    template: "<ng-content></ng-content>",
                    exportAs: 'element'
                }] }
    ];
    NgxPrintElementComponent.ctorParameters = function () { return [
        { type: NgxPrintElementService }
    ]; };
    return NgxPrintElementComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxPrintElementModule = /** @class */ (function () {
    function NgxPrintElementModule() {
    }
    NgxPrintElementModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        NgxPrintElementComponent,
                        NgxPrintElementDirective
                    ],
                    exports: [
                        NgxPrintElementComponent,
                        NgxPrintElementDirective
                    ]
                },] }
    ];
    return NgxPrintElementModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxPrintElementDirective, NgxPrintElementService, NgxPrintElementComponent, NgxPrintElementModule };

//# sourceMappingURL=ngx-print-element.js.map