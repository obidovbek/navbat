{"version":3,"sources":["./src/app/shared/service/websocket.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;;;;;;AAM3C,wEAAwE;AAIjE,MAAM,gBAAgB;IAE3B,+DAA+D;IAC/D,qEAAqE;IACrE,YACU,WAAwB,EACxB,WAAwB,EACxB,WAAwB,EACxB,MAAc,CAAC,qCAAqC;;QAHpD,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;QAEtB,8DAA8D;QAC9D,0BAA0B;IAC5B,CAAC;IAED,kBAAkB,CAAC,QAAQ;;QACzB,UAAI,CAAC,MAAM,0CACP,SAAS,CAAC,oBAAoB,EAC/B,SAAS,CAAC,IAAI,CAAC,kBAAkB,EAAE;IACxC,CAAC;IACD,oBAAoB,CAAC,IAAI;QACvB,IAAI,CAAC,IAAI;YAAE,OAAO;QAClB,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACtB,6CAA6C;QAC7C,2BAA2B;QAC3B,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,kDAAkD;QAClD,8DAA8D;QAC9D,6BAA6B;QAC7B,oCAAoC;QACpC,uDAAuD;QACvD,+CAA+C;QAC/C,aAAa;QACb,yDAAyD;QACzD,iDAAiD;QACjD,MAAM;QACN,MAAM;QAEN,iEAAiE;QACjE,0CAA0C;QAC1C,wCAAwC;QACxC,MAAM;QACN,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAC7D,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IACD,YAAY;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;IAC/C,CAAC;IACD,oBAAoB;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;IACvD,CAAC;IACD,oBAAoB;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;IACzD,CAAC;IACD,oBAAoB;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;IACvD,CAAC;IACD,UAAU,CAAC,GAAG;QACZ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IACtC,CAAC;IACD,aAAa,CAAC,IAAI;QAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IACD,cAAc,CAAC,GAAG;QAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;IAC1C,CAAC;;gFAjEU,gBAAgB;mGAAhB,gBAAgB,WAAhB,gBAAgB,mBAFf,MAAM;6FAEP,gBAAgB;cAH5B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpService } from 'src/app/shared/service/http.service';\r\nimport { AuthService } from 'src/app/shared/service/auth.service';\r\nimport { DataService } from 'src/app/shared/service/data.service';\r\nimport { Socket } from 'ngx-socket-io';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n// import { NativeRingtones } from '@ionic-native/native-ringtones/ngx';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WebsocketService {\r\n  user: any;\r\n  // messaging: BehaviorSubject<any> = new BehaviorSubject(null);\r\n  // nextUserDisplay: BehaviorSubject<any> = new BehaviorSubject(null);\r\n  constructor(\r\n    private httpService: HttpService,\r\n    private dataService: DataService,\r\n    private authService: AuthService,\r\n    private socket: Socket // private ringtones: NativeRingtones\r\n  ) {\r\n    // this.authService.user$.subscribe(user=>{this.user = user;})\r\n    // this.messaging.next(0);\r\n  }\r\n  websocket_server;\r\n  disconnect_officer(callback) {\r\n    this.socket\r\n      ?.fromEvent('disconnect_officer')\r\n      .subscribe(this.disconnect_officer);\r\n  }\r\n  websocket_connection(user) {\r\n    if (!user) return;\r\n    this.socket.connect();\r\n    // let name = `user-${new Date().getTime()}`;\r\n    // this.currentUser = name;\r\n    console.log('socket connected');\r\n    // this.socket.emit('set-name-queue', user.token);\r\n    //  this.socket.fromEvent('users-changed').subscribe(data => {\r\n    //   let user = data['user'];\r\n    //   if (data['event'] === 'left') {\r\n    //     console.log('User left: ' + user, data['users'])\r\n    //     // this.showToast('User left: ' + user);\r\n    //   } else {\r\n    //     console.log('User joined: ' + user, data['users'])\r\n    //     // this.showToast('User joined: ' + user);\r\n    //   }\r\n    // });\r\n\r\n    // this.socket.fromEvent('queue_next_user').subscribe((data) => {\r\n    //   console.log('queue_next_user', data);\r\n    //   // this.nextUserDisplay.next(data);\r\n    // });\r\n    this.socket.fromEvent('queue_send_officer').subscribe((data) => {\r\n      console.log('queue_send_officer', data);\r\n    });\r\n  }\r\n  menu_updated() {\r\n    return this.socket.fromEvent('menu_updated');\r\n  }\r\n  next_service_display() {\r\n    return this.socket.fromEvent('next_service_display');\r\n  }\r\n  connect_user_display() {\r\n    this.socket.emit('connect_user_display', { ok: true });\r\n  }\r\n  next_service_officer() {\r\n    return this.socket.fromEvent('next_service_officer');\r\n  }\r\n  queue_next(obj) {\r\n    this.socket.emit('queue_next', obj);\r\n  }\r\n  queue_officer(user) {\r\n    this.socket.emit('queue_officer', user);\r\n  }\r\n  queue_new_user(obj) {\r\n    this.socket.emit('queue_new_user', obj);\r\n  }\r\n}\r\n\r\n// import { Injectable } from '@angular/core';\r\n// import { HttpService } from '@app/services/http.service';\r\n// import { DataService } from '@app/services/data.service';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class WebsocketService {\r\n\r\n//   constructor(\r\n//       private httpService: HttpService,\r\n//       private dataService: DataService\r\n//     ) { }\r\n//   websocket_server;\r\n//   websocket_connection(user){\r\n//       if(!user)return;\r\n//       // this.websocket_server = new WebSocket(\"ws://2shtest.uz:8080\");\r\n//       // this.websocket_server = new WebSocket(\"ws://213.230.99.94:55000\");\r\n//       var websocket_server = new WebSocket(\"ws://192.168.10.250:8888\");\r\n//       var th = this;\r\n//       this.websocket_server.onopen = function(e) {\r\n//         console.log('onopen');\r\n//         th.websocket_server.send(\r\n//           JSON.stringify({\r\n//             'type': 'socket',\r\n//             'user_id': user.token,\r\n//           })\r\n//         );\r\n//       };\r\n//       this.websocket_server.onerror = function(e) {\r\n//         console.log('onerror', e)\r\n//       }\r\n//       this.websocket_server.onmessage = function(e) {\r\n//         console.log('onmessage', e.data)\r\n//         if (e.data) {\r\n//           var data = JSON.parse(e.data);\r\n//           switch (data.type) {\r\n//             case \"unsubs_to_order\":\r\n//             case \"subs_to_order\":\r\n//               th.httpService.get_data_active_order([data.driver_id, data.order_id])\r\n//               .subscribe((res:any)=>{\r\n//                 console.log('type', data.type);\r\n//                 console.log('order has new subscribtion', res);\r\n//                 if (res.status===200) {\r\n//                   th.dataService.offeredRides.forEach(offer=>{\r\n//                     if (offer.id === res.data.id)offer.subs = res.data.subs;\r\n//                   })\r\n//                   console.log('offers', th.dataService.offeredRides);\r\n//                 }\r\n//               })\r\n//               break;\r\n//             // case \"unsubs_to_order\":\r\n//             case \"going_order\":\r\n//             case \"rejected_order\":\r\n//               th.httpService.get_data_active_order([data.driver_id, data.order_id])\r\n//               .subscribe((res:any)=>{\r\n//                 console.log('type', data.type);\r\n//                 console.log('order has new subscribtion', res);\r\n//                 if (res.status===200) {\r\n//                   th.dataService.bookedRides.forEach(book=>{\r\n//                     if (book.id === res.data.id)book.subs = res.data.subs;\r\n//                   })\r\n//                   console.log('offers', th.dataService.bookedRides);\r\n//                 }\r\n//               })\r\n//               break;\r\n\r\n//             default:\r\n//               // code...\r\n//               break;\r\n//           }\r\n//         }\r\n//       }\r\n//   }\r\n//   websocket_send_msg(obj){\r\n//     this.websocket_server.send(\r\n//       JSON.stringify(obj)\r\n//     );\r\n//     // {\r\n//     //     'type': 'subs_to_order',\r\n//     //     'user_id': this.user.token,\r\n//     //     'send_to': ['XVoSTKMnjbuG8lF9MnMV8jUSWMgi'],\r\n//     //     'order_id': \"Salom\"\r\n//     //   }\r\n//   }\r\n//   // getUsers(obj_path){\r\n//   //   return this.http.post(environment.http.getUsers.path,\r\n//   //     {\r\n//   //       file_path: environment.http.getUsers.file,\r\n//   //       obj_path: obj_path,\r\n//   //     }\r\n//   //   );\r\n//   // }\r\n//   // setUsers(obj_path, obj){\r\n//   //   return this.http.post(environment.http.setUsers.path,\r\n//   //     {\r\n//   //       file_path: environment.http.setUsers.file,\r\n//   //       obj_path: obj_path,\r\n//   //       obj: obj,\r\n//   //     }\r\n//   //   );\r\n//   // }\r\n\r\n// }\r\n"],"sourceRoot":"webpack:///"}