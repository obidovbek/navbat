{"version":3,"sources":["webpack:///src/app/shared/service/websocket.service.ts"],"names":["WebsocketService","httpService","dataService","authService","socket","nextUserDisplay","user","connect","console","log","emit","token","fromEvent","subscribe","data","next","obj","providedIn"],"mappings":";;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,c,CAMA;;;UAIaA,gB;AAKX,kCACYC,WADZ,EAEYC,WAFZ,EAGYC,WAHZ,EAIYC,MAJZ,EAI0B;AAAA;;AAHd,eAAAH,WAAA,GAAAA,WAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,MAAA,GAAAA,MAAA,CAAc,CAN1B;;AACA,eAAAC,eAAA,GAAwC,IAAI,oDAAJ,CAAoB,IAApB,CAAxC,CAK0B,CAGxB;AACA;AACD;;;;iBAEC,8BAAqBC,IAArB,EAAyB;AAAA;;AACrB,gBAAG,CAACA,IAAJ,EAAS;AACT,iBAAKF,MAAL,CAAYG,OAAZ,GAFqB,CAGrB;AACA;;AACAC,mBAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,iBAAKL,MAAL,CAAYM,IAAZ,CAAiB,gBAAjB,EAAmCJ,IAAI,CAACK,KAAxC,EANqB,CAOrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,iBAAKP,MAAL,CAAYQ,SAAZ,CAAsB,iBAAtB,EAAyCC,SAAzC,CAAmD,UAAAC,IAAI,EAAI;AACzDN,qBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BK,IAA9B;;AACA,mBAAI,CAACT,eAAL,CAAqBU,IAArB,CAA0BD,IAA1B;AACD,aAHD;AAIA,iBAAKV,MAAL,CAAYQ,SAAZ,CAAsB,oBAAtB,EAA4CC,SAA5C,CAAsD,UAAAC,IAAI,EAAI;AAC5DN,qBAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCK,IAAjC;AACD,aAFD;AAIH;;;iBACH,oBAAWE,GAAX,EAAc;AACZ,iBAAKZ,MAAL,CAAYM,IAAZ,CAAiB,YAAjB,EAA+BM,GAA/B;AACD;;;iBACD,wBAAeA,GAAf,EAAkB;AAChB,iBAAKZ,MAAL,CAAYM,IAAZ,CAAiB,gBAAjB,EAAmCM,GAAnC;AACD;;;;;;;yBA/CUhB,gB,EAAgB,uI,EAAA,uI,EAAA,uI,EAAA,4G;AAAA,O;;;eAAhBA,gB;AAAgB,iBAAhBA,gBAAgB,K;AAAA,oBAFf;;;;;wEAEDA,gB,EAAgB;gBAH5B,wDAG4B;iBAHjB;AACViB,sBAAU,EAAE;AADF,W;AAGiB,U","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpService } from 'src/app/shared/service/http.service';\r\nimport { AuthService } from 'src/app/shared/service/auth.service';\r\nimport { DataService } from 'src/app/shared/service/data.service';\r\nimport { Socket } from 'ngx-socket-io'\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n// import { NativeRingtones } from '@ionic-native/native-ringtones/ngx';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebsocketService {\r\n\r\n  user: any;\r\n  // messaging: BehaviorSubject<any> = new BehaviorSubject(null);\r\n  nextUserDisplay: BehaviorSubject<any> = new BehaviorSubject(null);\r\n  constructor(\r\n      private httpService: HttpService,\r\n      private dataService: DataService,\r\n      private authService: AuthService,\r\n      private socket: Socket,\r\n      // private ringtones: NativeRingtones\r\n    ) {\r\n    // this.authService.user$.subscribe(user=>{this.user = user;})\r\n    // this.messaging.next(0);\r\n  }\r\n  websocket_server;\r\n    websocket_connection(user){\r\n        if(!user)return;\r\n        this.socket.connect();\r\n        // let name = `user-${new Date().getTime()}`;\r\n        // this.currentUser = name;\r\n        console.log('socket connected')\r\n        this.socket.emit('set-name-queue', user.token);\r\n        //  this.socket.fromEvent('users-changed').subscribe(data => {\r\n        //   let user = data['user'];\r\n        //   if (data['event'] === 'left') {\r\n        //     console.log('User left: ' + user, data['users'])\r\n        //     // this.showToast('User left: ' + user);\r\n        //   } else {\r\n        //     console.log('User joined: ' + user, data['users'])\r\n        //     // this.showToast('User joined: ' + user);\r\n        //   }\r\n        // });\r\n        this.socket.fromEvent('queue_next_user').subscribe(data => {\r\n          console.log('queue_next_user',data);\r\n          this.nextUserDisplay.next(data);\r\n        });\r\n        this.socket.fromEvent('queue_send_officer').subscribe(data => {\r\n          console.log('queue_send_officer',data);\r\n        });\r\n    \r\n    }\r\n  queue_next(obj){\r\n    this.socket.emit('queue_next', obj);\r\n  }\r\n  queue_new_user(obj){\r\n    this.socket.emit('queue_new_user', obj);\r\n  }\r\n}\r\n\r\n// import { Injectable } from '@angular/core';\r\n// import { HttpService } from '@app/services/http.service';\r\n// import { DataService } from '@app/services/data.service';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class WebsocketService {\r\n\r\n//   constructor(\r\n//       private httpService: HttpService,\r\n//       private dataService: DataService\r\n//     ) { }\r\n//   websocket_server;\r\n//   websocket_connection(user){\r\n//       if(!user)return;\r\n//       // this.websocket_server = new WebSocket(\"ws://2shtest.uz:8080\");\r\n//       // this.websocket_server = new WebSocket(\"ws://213.230.99.94:55000\");\r\n//       var websocket_server = new WebSocket(\"ws://192.168.10.250:8888\");\r\n//       var th = this;\r\n//       this.websocket_server.onopen = function(e) {\r\n//         console.log('onopen');\r\n//         th.websocket_server.send(\r\n//           JSON.stringify({\r\n//             'type': 'socket',\r\n//             'user_id': user.token,\r\n//           })\r\n//         );\r\n//       };\r\n//       this.websocket_server.onerror = function(e) {\r\n//         console.log('onerror', e)\r\n//       }\r\n//       this.websocket_server.onmessage = function(e) {\r\n//         console.log('onmessage', e.data)\r\n//         if (e.data) {\r\n//           var data = JSON.parse(e.data);\r\n//           switch (data.type) {\r\n//             case \"unsubs_to_order\":\r\n//             case \"subs_to_order\":\r\n//               th.httpService.get_data_active_order([data.driver_id, data.order_id])\r\n//               .subscribe((res:any)=>{\r\n//                 console.log('type', data.type);\r\n//                 console.log('order has new subscribtion', res);\r\n//                 if (res.status===200) {\r\n//                   th.dataService.offeredRides.forEach(offer=>{\r\n//                     if (offer.id === res.data.id)offer.subs = res.data.subs;\r\n//                   })\r\n//                   console.log('offers', th.dataService.offeredRides);\r\n//                 }\r\n//               })\r\n//               break;\r\n//             // case \"unsubs_to_order\":\r\n//             case \"going_order\":\r\n//             case \"rejected_order\":\r\n//               th.httpService.get_data_active_order([data.driver_id, data.order_id])\r\n//               .subscribe((res:any)=>{\r\n//                 console.log('type', data.type);\r\n//                 console.log('order has new subscribtion', res);\r\n//                 if (res.status===200) {\r\n//                   th.dataService.bookedRides.forEach(book=>{\r\n//                     if (book.id === res.data.id)book.subs = res.data.subs;\r\n//                   })\r\n//                   console.log('offers', th.dataService.bookedRides);\r\n//                 }\r\n//               })\r\n//               break;\r\n            \r\n//             default:\r\n//               // code...\r\n//               break;\r\n//           }\r\n//         }\r\n//       }  \r\n//   }\r\n//   websocket_send_msg(obj){\r\n//     this.websocket_server.send(\r\n//       JSON.stringify(obj)\r\n//     );\r\n//     // {\r\n//     //     'type': 'subs_to_order',\r\n//     //     'user_id': this.user.token,\r\n//     //     'send_to': ['XVoSTKMnjbuG8lF9MnMV8jUSWMgi'],\r\n//     //     'order_id': \"Salom\"\r\n//     //   }\r\n//   }\r\n//   // getUsers(obj_path){\r\n//   //   return this.http.post(environment.http.getUsers.path, \r\n//   //     { \r\n//   //       file_path: environment.http.getUsers.file, \r\n//   //       obj_path: obj_path,\r\n//   //     }\r\n//   //   );\r\n//   // }\r\n//   // setUsers(obj_path, obj){\r\n//   //   return this.http.post(environment.http.setUsers.path, \r\n//   //     { \r\n//   //       file_path: environment.http.setUsers.file, \r\n//   //       obj_path: obj_path,\r\n//   //       obj: obj,\r\n//   //     }\r\n//   //   );\r\n//   // }\r\n\r\n// }\r\n"]}